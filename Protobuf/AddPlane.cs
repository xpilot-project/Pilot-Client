/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AddPlane.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from AddPlane.proto</summary>
  public static partial class AddPlaneReflection {

    #region Descriptor
    /// <summary>File descriptor for AddPlane.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AddPlaneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5BZGRQbGFuZS5wcm90bxIGeHBpbG90IqoDCghBZGRQbGFuZRIVCghjYWxs",
            "c2lnbhgBIAEoCUgAiAEBEj8KDHZpc3VhbF9zdGF0ZRgCIAEoCzIkLnhwaWxv",
            "dC5BZGRQbGFuZS5BaXJjcmFmdFZpc3VhbFN0YXRlSAGIAQESFAoHYWlybGlu",
            "ZRgDIAEoCUgCiAEBEhYKCWVxdWlwbWVudBgEIAEoCUgDiAEBGt8BChNBaXJj",
            "cmFmdFZpc3VhbFN0YXRlEhUKCGxhdGl0dWRlGAEgASgBSACIAQESFgoJbG9u",
            "Z2l0dWRlGAIgASgBSAGIAQESFQoIYWx0aXR1ZGUYAyABKAFIAogBARISCgVw",
            "aXRjaBgEIAEoAUgDiAEBEhQKB2hlYWRpbmcYBSABKAFIBIgBARIRCgRiYW5r",
            "GAYgASgBSAWIAQFCCwoJX2xhdGl0dWRlQgwKCl9sb25naXR1ZGVCCwoJX2Fs",
            "dGl0dWRlQggKBl9waXRjaEIKCghfaGVhZGluZ0IHCgVfYmFua0ILCglfY2Fs",
            "bHNpZ25CDwoNX3Zpc3VhbF9zdGF0ZUIKCghfYWlybGluZUIMCgpfZXF1aXBt",
            "ZW50QhmqAhZWYXRzaW0uWHBpbG90LlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.AddPlane), global::Vatsim.Xpilot.Protobuf.AddPlane.Parser, new[]{ "Callsign", "VisualState", "Airline", "Equipment" }, new[]{ "Callsign", "VisualState", "Airline", "Equipment" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState), global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState.Parser, new[]{ "Latitude", "Longitude", "Altitude", "Pitch", "Heading", "Bank" }, new[]{ "Latitude", "Longitude", "Altitude", "Pitch", "Heading", "Bank" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddPlane : pb::IMessage<AddPlane>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddPlane> _parser = new pb::MessageParser<AddPlane>(() => new AddPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.AddPlaneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPlane(AddPlane other) : this() {
      callsign_ = other.callsign_;
      visualState_ = other.visualState_ != null ? other.visualState_.Clone() : null;
      airline_ = other.airline_;
      equipment_ = other.equipment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPlane Clone() {
      return new AddPlane(this);
    }

    /// <summary>Field number for the "callsign" field.</summary>
    public const int CallsignFieldNumber = 1;
    private string callsign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Callsign {
      get { return callsign_ ?? ""; }
      set {
        callsign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "callsign" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCallsign {
      get { return callsign_ != null; }
    }
    /// <summary>Clears the value of the "callsign" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCallsign() {
      callsign_ = null;
    }

    /// <summary>Field number for the "visual_state" field.</summary>
    public const int VisualStateFieldNumber = 2;
    private global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState visualState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState VisualState {
      get { return visualState_; }
      set {
        visualState_ = value;
      }
    }

    /// <summary>Field number for the "airline" field.</summary>
    public const int AirlineFieldNumber = 3;
    private string airline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Airline {
      get { return airline_ ?? ""; }
      set {
        airline_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "airline" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAirline {
      get { return airline_ != null; }
    }
    /// <summary>Clears the value of the "airline" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAirline() {
      airline_ = null;
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 4;
    private string equipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Equipment {
      get { return equipment_ ?? ""; }
      set {
        equipment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "equipment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEquipment {
      get { return equipment_ != null; }
    }
    /// <summary>Clears the value of the "equipment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEquipment() {
      equipment_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Callsign != other.Callsign) return false;
      if (!object.Equals(VisualState, other.VisualState)) return false;
      if (Airline != other.Airline) return false;
      if (Equipment != other.Equipment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCallsign) hash ^= Callsign.GetHashCode();
      if (visualState_ != null) hash ^= VisualState.GetHashCode();
      if (HasAirline) hash ^= Airline.GetHashCode();
      if (HasEquipment) hash ^= Equipment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCallsign) {
        output.WriteRawTag(10);
        output.WriteString(Callsign);
      }
      if (visualState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VisualState);
      }
      if (HasAirline) {
        output.WriteRawTag(26);
        output.WriteString(Airline);
      }
      if (HasEquipment) {
        output.WriteRawTag(34);
        output.WriteString(Equipment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCallsign) {
        output.WriteRawTag(10);
        output.WriteString(Callsign);
      }
      if (visualState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VisualState);
      }
      if (HasAirline) {
        output.WriteRawTag(26);
        output.WriteString(Airline);
      }
      if (HasEquipment) {
        output.WriteRawTag(34);
        output.WriteString(Equipment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCallsign) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Callsign);
      }
      if (visualState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisualState);
      }
      if (HasAirline) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Airline);
      }
      if (HasEquipment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Equipment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPlane other) {
      if (other == null) {
        return;
      }
      if (other.HasCallsign) {
        Callsign = other.Callsign;
      }
      if (other.visualState_ != null) {
        if (visualState_ == null) {
          VisualState = new global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState();
        }
        VisualState.MergeFrom(other.VisualState);
      }
      if (other.HasAirline) {
        Airline = other.Airline;
      }
      if (other.HasEquipment) {
        Equipment = other.Equipment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Callsign = input.ReadString();
            break;
          }
          case 18: {
            if (visualState_ == null) {
              VisualState = new global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState();
            }
            input.ReadMessage(VisualState);
            break;
          }
          case 26: {
            Airline = input.ReadString();
            break;
          }
          case 34: {
            Equipment = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Callsign = input.ReadString();
            break;
          }
          case 18: {
            if (visualState_ == null) {
              VisualState = new global::Vatsim.Xpilot.Protobuf.AddPlane.Types.AircraftVisualState();
            }
            input.ReadMessage(VisualState);
            break;
          }
          case 26: {
            Airline = input.ReadString();
            break;
          }
          case 34: {
            Equipment = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the AddPlane message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class AircraftVisualState : pb::IMessage<AircraftVisualState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<AircraftVisualState> _parser = new pb::MessageParser<AircraftVisualState>(() => new AircraftVisualState());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AircraftVisualState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vatsim.Xpilot.Protobuf.AddPlane.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AircraftVisualState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AircraftVisualState(AircraftVisualState other) : this() {
          _hasBits0 = other._hasBits0;
          latitude_ = other.latitude_;
          longitude_ = other.longitude_;
          altitude_ = other.altitude_;
          pitch_ = other.pitch_;
          heading_ = other.heading_;
          bank_ = other.bank_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AircraftVisualState Clone() {
          return new AircraftVisualState(this);
        }

        /// <summary>Field number for the "latitude" field.</summary>
        public const int LatitudeFieldNumber = 1;
        private double latitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Latitude {
          get { if ((_hasBits0 & 1) != 0) { return latitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 1;
            latitude_ = value;
          }
        }
        /// <summary>Gets whether the "latitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLatitude {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "latitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLatitude() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "longitude" field.</summary>
        public const int LongitudeFieldNumber = 2;
        private double longitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Longitude {
          get { if ((_hasBits0 & 2) != 0) { return longitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 2;
            longitude_ = value;
          }
        }
        /// <summary>Gets whether the "longitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLongitude {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "longitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLongitude() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "altitude" field.</summary>
        public const int AltitudeFieldNumber = 3;
        private double altitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Altitude {
          get { if ((_hasBits0 & 4) != 0) { return altitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 4;
            altitude_ = value;
          }
        }
        /// <summary>Gets whether the "altitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAltitude {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "altitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAltitude() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "pitch" field.</summary>
        public const int PitchFieldNumber = 4;
        private double pitch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Pitch {
          get { if ((_hasBits0 & 8) != 0) { return pitch_; } else { return 0D; } }
          set {
            _hasBits0 |= 8;
            pitch_ = value;
          }
        }
        /// <summary>Gets whether the "pitch" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPitch {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "pitch" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPitch() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "heading" field.</summary>
        public const int HeadingFieldNumber = 5;
        private double heading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Heading {
          get { if ((_hasBits0 & 16) != 0) { return heading_; } else { return 0D; } }
          set {
            _hasBits0 |= 16;
            heading_ = value;
          }
        }
        /// <summary>Gets whether the "heading" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeading {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "heading" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeading() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "bank" field.</summary>
        public const int BankFieldNumber = 6;
        private double bank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Bank {
          get { if ((_hasBits0 & 32) != 0) { return bank_; } else { return 0D; } }
          set {
            _hasBits0 |= 32;
            bank_ = value;
          }
        }
        /// <summary>Gets whether the "bank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBank {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "bank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBank() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AircraftVisualState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AircraftVisualState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Heading, other.Heading)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bank, other.Bank)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
          if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
          if (HasAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
          if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
          if (HasHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Heading);
          if (HasBank) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bank);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasLatitude) {
            output.WriteRawTag(9);
            output.WriteDouble(Latitude);
          }
          if (HasLongitude) {
            output.WriteRawTag(17);
            output.WriteDouble(Longitude);
          }
          if (HasAltitude) {
            output.WriteRawTag(25);
            output.WriteDouble(Altitude);
          }
          if (HasPitch) {
            output.WriteRawTag(33);
            output.WriteDouble(Pitch);
          }
          if (HasHeading) {
            output.WriteRawTag(41);
            output.WriteDouble(Heading);
          }
          if (HasBank) {
            output.WriteRawTag(49);
            output.WriteDouble(Bank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLatitude) {
            output.WriteRawTag(9);
            output.WriteDouble(Latitude);
          }
          if (HasLongitude) {
            output.WriteRawTag(17);
            output.WriteDouble(Longitude);
          }
          if (HasAltitude) {
            output.WriteRawTag(25);
            output.WriteDouble(Altitude);
          }
          if (HasPitch) {
            output.WriteRawTag(33);
            output.WriteDouble(Pitch);
          }
          if (HasHeading) {
            output.WriteRawTag(41);
            output.WriteDouble(Heading);
          }
          if (HasBank) {
            output.WriteRawTag(49);
            output.WriteDouble(Bank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasLatitude) {
            size += 1 + 8;
          }
          if (HasLongitude) {
            size += 1 + 8;
          }
          if (HasAltitude) {
            size += 1 + 8;
          }
          if (HasPitch) {
            size += 1 + 8;
          }
          if (HasHeading) {
            size += 1 + 8;
          }
          if (HasBank) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AircraftVisualState other) {
          if (other == null) {
            return;
          }
          if (other.HasLatitude) {
            Latitude = other.Latitude;
          }
          if (other.HasLongitude) {
            Longitude = other.Longitude;
          }
          if (other.HasAltitude) {
            Altitude = other.Altitude;
          }
          if (other.HasPitch) {
            Pitch = other.Pitch;
          }
          if (other.HasHeading) {
            Heading = other.Heading;
          }
          if (other.HasBank) {
            Bank = other.Bank;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Latitude = input.ReadDouble();
                break;
              }
              case 17: {
                Longitude = input.ReadDouble();
                break;
              }
              case 25: {
                Altitude = input.ReadDouble();
                break;
              }
              case 33: {
                Pitch = input.ReadDouble();
                break;
              }
              case 41: {
                Heading = input.ReadDouble();
                break;
              }
              case 49: {
                Bank = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Latitude = input.ReadDouble();
                break;
              }
              case 17: {
                Longitude = input.ReadDouble();
                break;
              }
              case 25: {
                Altitude = input.ReadDouble();
                break;
              }
              case 33: {
                Pitch = input.ReadDouble();
                break;
              }
              case 41: {
                Heading = input.ReadDouble();
                break;
              }
              case 49: {
                Bank = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
