// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: wrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xpilot
{

    /// <summary>Holder for reflection information generated from wrapper.proto</summary>
    public static partial class WrapperReflection
    {

        #region Descriptor
        /// <summary>File descriptor for wrapper.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static WrapperReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg13cmFwcGVyLnByb3RvEgZ4cGlsb3QaH2dvb2dsZS9wcm90b2J1Zi90aW1l",
                  "c3RhbXAucHJvdG8aEHhwbGFuZWRhdGEucHJvdG8aEHBsdWdpbmhhc2gucHJv",
                  "dG8aE3BsdWdpbnZlcnNpb24ucHJvdG8aEWNzbHZhbGlkYXRlLnByb3RvIvMB",
                  "CgdXcmFwcGVyEi0KCXRpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1",
                  "Zi5UaW1lc3RhbXASKQoLeHBsYW5lX2RhdGEYAiABKAsyEi54cGlsb3QuWHBs",
                  "YW5lRGF0YUgAEikKC3BsdWdpbl9oYXNoGAMgASgLMhIueHBpbG90LlBsdWdp",
                  "bkhhc2hIABIvCg5wbHVnaW5fdmVyc2lvbhgEIAEoCzIVLnhwaWxvdC5QbHVn",
                  "aW5WZXJzaW9uSAASKwoMY3NsX3ZhbGlkYXRlGAUgASgLMhMueHBpbG90LkNz",
                  "bFZhbGlkYXRlSABCBQoDbXNnYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Xpilot.XplanedataReflection.Descriptor, global::Xpilot.PluginhashReflection.Descriptor, global::Xpilot.PluginversionReflection.Descriptor, global::Xpilot.CslvalidateReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xpilot.Wrapper), global::Xpilot.Wrapper.Parser, new[]{ "Timestamp", "XplaneData", "PluginHash", "PluginVersion", "CslValidate" }, new[]{ "Msg" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Wrapper : pb::IMessage<Wrapper>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<Wrapper> _parser = new pb::MessageParser<Wrapper>(() => new Wrapper());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Wrapper> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Xpilot.WrapperReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Wrapper()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Wrapper(Wrapper other) : this()
        {
            timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
            switch (other.MsgCase)
            {
                case MsgOneofCase.XplaneData:
                    XplaneData = other.XplaneData.Clone();
                    break;
                case MsgOneofCase.PluginHash:
                    PluginHash = other.PluginHash.Clone();
                    break;
                case MsgOneofCase.PluginVersion:
                    PluginVersion = other.PluginVersion.Clone();
                    break;
                case MsgOneofCase.CslValidate:
                    CslValidate = other.CslValidate.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Wrapper Clone()
        {
            return new Wrapper(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "xplane_data" field.</summary>
        public const int XplaneDataFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xpilot.XplaneData XplaneData
        {
            get { return msgCase_ == MsgOneofCase.XplaneData ? (global::Xpilot.XplaneData)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.XplaneData;
            }
        }

        /// <summary>Field number for the "plugin_hash" field.</summary>
        public const int PluginHashFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xpilot.PluginHash PluginHash
        {
            get { return msgCase_ == MsgOneofCase.PluginHash ? (global::Xpilot.PluginHash)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PluginHash;
            }
        }

        /// <summary>Field number for the "plugin_version" field.</summary>
        public const int PluginVersionFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xpilot.PluginVersion PluginVersion
        {
            get { return msgCase_ == MsgOneofCase.PluginVersion ? (global::Xpilot.PluginVersion)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PluginVersion;
            }
        }

        /// <summary>Field number for the "csl_validate" field.</summary>
        public const int CslValidateFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xpilot.CslValidate CslValidate
        {
            get { return msgCase_ == MsgOneofCase.CslValidate ? (global::Xpilot.CslValidate)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CslValidate;
            }
        }

        private object msg_;
        /// <summary>Enum of possible cases for the "msg" oneof.</summary>
        public enum MsgOneofCase
        {
            None = 0,
            XplaneData = 2,
            PluginHash = 3,
            PluginVersion = 4,
            CslValidate = 5,
        }
        private MsgOneofCase msgCase_ = MsgOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgOneofCase MsgCase
        {
            get { return msgCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMsg()
        {
            msgCase_ = MsgOneofCase.None;
            msg_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Wrapper);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Wrapper other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Timestamp, other.Timestamp)) return false;
            if (!object.Equals(XplaneData, other.XplaneData)) return false;
            if (!object.Equals(PluginHash, other.PluginHash)) return false;
            if (!object.Equals(PluginVersion, other.PluginVersion)) return false;
            if (!object.Equals(CslValidate, other.CslValidate)) return false;
            if (MsgCase != other.MsgCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
            if (msgCase_ == MsgOneofCase.XplaneData) hash ^= XplaneData.GetHashCode();
            if (msgCase_ == MsgOneofCase.PluginHash) hash ^= PluginHash.GetHashCode();
            if (msgCase_ == MsgOneofCase.PluginVersion) hash ^= PluginVersion.GetHashCode();
            if (msgCase_ == MsgOneofCase.CslValidate) hash ^= CslValidate.GetHashCode();
            hash ^= (int)msgCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (msgCase_ == MsgOneofCase.XplaneData) {
        output.WriteRawTag(18);
        output.WriteMessage(XplaneData);
      }
      if (msgCase_ == MsgOneofCase.PluginHash) {
        output.WriteRawTag(26);
        output.WriteMessage(PluginHash);
      }
      if (msgCase_ == MsgOneofCase.PluginVersion) {
        output.WriteRawTag(34);
        output.WriteMessage(PluginVersion);
      }
      if (msgCase_ == MsgOneofCase.CslValidate) {
        output.WriteRawTag(42);
        output.WriteMessage(CslValidate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (timestamp_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Timestamp);
            }
            if (msgCase_ == MsgOneofCase.XplaneData)
            {
                output.WriteRawTag(18);
                output.WriteMessage(XplaneData);
            }
            if (msgCase_ == MsgOneofCase.PluginHash)
            {
                output.WriteRawTag(26);
                output.WriteMessage(PluginHash);
            }
            if (msgCase_ == MsgOneofCase.PluginVersion)
            {
                output.WriteRawTag(34);
                output.WriteMessage(PluginVersion);
            }
            if (msgCase_ == MsgOneofCase.CslValidate)
            {
                output.WriteRawTag(42);
                output.WriteMessage(CslValidate);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (timestamp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
            }
            if (msgCase_ == MsgOneofCase.XplaneData)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(XplaneData);
            }
            if (msgCase_ == MsgOneofCase.PluginHash)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PluginHash);
            }
            if (msgCase_ == MsgOneofCase.PluginVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PluginVersion);
            }
            if (msgCase_ == MsgOneofCase.CslValidate)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CslValidate);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Wrapper other)
        {
            if (other == null)
            {
                return;
            }
            if (other.timestamp_ != null)
            {
                if (timestamp_ == null)
                {
                    Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                Timestamp.MergeFrom(other.Timestamp);
            }
            switch (other.MsgCase)
            {
                case MsgOneofCase.XplaneData:
                    if (XplaneData == null)
                    {
                        XplaneData = new global::Xpilot.XplaneData();
                    }
                    XplaneData.MergeFrom(other.XplaneData);
                    break;
                case MsgOneofCase.PluginHash:
                    if (PluginHash == null)
                    {
                        PluginHash = new global::Xpilot.PluginHash();
                    }
                    PluginHash.MergeFrom(other.PluginHash);
                    break;
                case MsgOneofCase.PluginVersion:
                    if (PluginVersion == null)
                    {
                        PluginVersion = new global::Xpilot.PluginVersion();
                    }
                    PluginVersion.MergeFrom(other.PluginVersion);
                    break;
                case MsgOneofCase.CslValidate:
                    if (CslValidate == null)
                    {
                        CslValidate = new global::Xpilot.CslValidate();
                    }
                    CslValidate.MergeFrom(other.CslValidate);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            global::Xpilot.XplaneData subBuilder = new global::Xpilot.XplaneData();
            if (msgCase_ == MsgOneofCase.XplaneData) {
              subBuilder.MergeFrom(XplaneData);
            }
            input.ReadMessage(subBuilder);
            XplaneData = subBuilder;
            break;
          }
          case 26: {
            global::Xpilot.PluginHash subBuilder = new global::Xpilot.PluginHash();
            if (msgCase_ == MsgOneofCase.PluginHash) {
              subBuilder.MergeFrom(PluginHash);
            }
            input.ReadMessage(subBuilder);
            PluginHash = subBuilder;
            break;
          }
          case 34: {
            global::Xpilot.PluginVersion subBuilder = new global::Xpilot.PluginVersion();
            if (msgCase_ == MsgOneofCase.PluginVersion) {
              subBuilder.MergeFrom(PluginVersion);
            }
            input.ReadMessage(subBuilder);
            PluginVersion = subBuilder;
            break;
          }
          case 42: {
            global::Xpilot.CslValidate subBuilder = new global::Xpilot.CslValidate();
            if (msgCase_ == MsgOneofCase.CslValidate) {
              subBuilder.MergeFrom(CslValidate);
            }
            input.ReadMessage(subBuilder);
            CslValidate = subBuilder;
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            if (timestamp_ == null)
                            {
                                Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                            }
                            input.ReadMessage(Timestamp);
                            break;
                        }
                    case 18:
                        {
                            global::Xpilot.XplaneData subBuilder = new global::Xpilot.XplaneData();
                            if (msgCase_ == MsgOneofCase.XplaneData)
                            {
                                subBuilder.MergeFrom(XplaneData);
                            }
                            input.ReadMessage(subBuilder);
                            XplaneData = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::Xpilot.PluginHash subBuilder = new global::Xpilot.PluginHash();
                            if (msgCase_ == MsgOneofCase.PluginHash)
                            {
                                subBuilder.MergeFrom(PluginHash);
                            }
                            input.ReadMessage(subBuilder);
                            PluginHash = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::Xpilot.PluginVersion subBuilder = new global::Xpilot.PluginVersion();
                            if (msgCase_ == MsgOneofCase.PluginVersion)
                            {
                                subBuilder.MergeFrom(PluginVersion);
                            }
                            input.ReadMessage(subBuilder);
                            PluginVersion = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::Xpilot.CslValidate subBuilder = new global::Xpilot.CslValidate();
                            if (msgCase_ == MsgOneofCase.CslValidate)
                            {
                                subBuilder.MergeFrom(CslValidate);
                            }
                            input.ReadMessage(subBuilder);
                            CslValidate = subBuilder;
                            break;
                        }
                }
            }
        }
#endif

    }

    #endregion

}

#endregion Designer generated code
