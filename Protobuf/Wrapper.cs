/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Wrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from Wrapper.proto</summary>
  public static partial class WrapperReflection {

    #region Descriptor
    /// <summary>File descriptor for Wrapper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WrapperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1XcmFwcGVyLnByb3RvEgZ4cGlsb3QaH2dvb2dsZS9wcm90b2J1Zi90aW1l",
            "c3RhbXAucHJvdG8aFFhwbGFuZURhdGFyZWZzLnByb3RvGhdQbHVnaW5JbmZv",
            "cm1hdGlvbi5wcm90bxoTQ3NsVmFsaWRhdGlvbi5wcm90bxoOQWRkUGxhbmUu",
            "cHJvdG8aFkNoYW5nZVBsYW5lTW9kZWwucHJvdG8aFFBvc2l0aW9uVXBkYXRl",
            "LnByb3RvGhFEZWxldGVQbGFuZS5wcm90bxoWTmV0d29ya0Nvbm5lY3RlZC5w",
            "cm90bxoZTmV0d29ya0Rpc2Nvbm5lY3RlZC5wcm90bxoUQWlycGxhbmVDb25m",
            "aWcucHJvdG8aF05lYXJieUNvbnRyb2xsZXJzLnByb3RvGhxQcml2YXRlTWVz",
            "c2FnZVJlY2VpdmVkLnByb3RvGhhQcml2YXRlTWVzc2FnZVNlbnQucHJvdG8a",
            "FFNldFRyYW5zcG9uZGVyLnByb3RvGhhGYXN0UG9zaXRpb25VcGRhdGUucHJv",
            "dG8aFVBsYW5lQWRkZWRUb1NpbS5wcm90bxoQUmFkaW9TdGFjay5wcm90bxoW",
            "VXNlckFpcmNyYWZ0RGF0YS5wcm90bxocVXNlckFpcmNyYWZ0Q29uZmlnRGF0",
            "YS5wcm90bxoTU2V0UmFkaW9TdGFjay5wcm90byL1CAoHV3JhcHBlchItCgl0",
            "aW1lc3RhbXAYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYK",
            "EnVzZXJfYWlyY3JhZnRfZGF0YRgCIAEoCzIYLnhwaWxvdC5Vc2VyQWlyY3Jh",
            "ZnREYXRhSAASPgoUdXNlcl9haXJjcmFmdF9jb25maWcYAyABKAsyHi54cGls",
            "b3QuVXNlckFpcmNyYWZ0Q29uZmlnRGF0YUgAEikKC3JhZGlvX3N0YWNrGAQg",
            "ASgLMhIueHBpbG90LlJhZGlvU3RhY2tIABIxCg9wb3NpdGlvbl91cGRhdGUY",
            "BSABKAsyFi54cGlsb3QuUG9zaXRpb25VcGRhdGVIABI6ChRmYXN0X3Bvc2l0",
            "aW9uX3VwZGF0ZRgGIAEoCzIaLnhwaWxvdC5GYXN0UG9zaXRpb25VcGRhdGVI",
            "ABIxCg9haXJwbGFuZV9jb25maWcYByABKAsyFi54cGlsb3QuQWlycGxhbmVD",
            "b25maWdIABIlCglhZGRfcGxhbmUYCCABKAsyEC54cGlsb3QuQWRkUGxhbmVI",
            "ABI1ChJwbGFuZV9hZGRlZF90b19zaW0YCSABKAsyFy54cGlsb3QuUGxhbmVB",
            "ZGRlZFRvU2ltSAASNgoSY2hhbmdlX3BsYW5lX21vZGVsGAogASgLMhgueHBp",
            "bG90LkNoYW5nZVBsYW5lTW9kZWxIABIrCgxkZWxldGVfcGxhbmUYCyABKAsy",
            "Ey54cGlsb3QuRGVsZXRlUGxhbmVIABJCChhwcml2YXRlX21lc3NhZ2VfcmVj",
            "ZWl2ZWQYDCABKAsyHi54cGlsb3QuUHJpdmF0ZU1lc3NhZ2VSZWNlaXZlZEgA",
            "EjoKFHByaXZhdGVfbWVzc2FnZV9zZW50GA0gASgLMhoueHBpbG90LlByaXZh",
            "dGVNZXNzYWdlU2VudEgAEjUKEW5ldHdvcmtfY29ubmVjdGVkGA4gASgLMhgu",
            "eHBpbG90Lk5ldHdvcmtDb25uZWN0ZWRIABI7ChRuZXR3b3JrX2Rpc2Nvbm5l",
            "Y3RlZBgPIAEoCzIbLnhwaWxvdC5OZXR3b3JrRGlzY29ubmVjdGVkSAASNwoS",
            "bmVhcmJ5X2NvbnRyb2xsZXJzGBAgASgLMhkueHBpbG90Lk5lYXJieUNvbnRy",
            "b2xsZXJzSAASMQoPc2V0X3RyYW5zcG9uZGVyGBEgASgLMhYueHBpbG90LlNl",
            "dFRyYW5zcG9uZGVySAASLwoOc2V0X3JhZGlvc3RhY2sYEiABKAsyFS54cGls",
            "b3QuU2V0UmFkaW9TdGFja0gAEjEKD3hwbGFuZV9kYXRhcmVmcxgTIAEoCzIW",
            "LnhwaWxvdC5YcGxhbmVEYXRhcmVmc0gAEjcKEnBsdWdpbl9pbmZvcm1hdGlv",
            "bhgUIAEoCzIZLnhwaWxvdC5QbHVnaW5JbmZvcm1hdGlvbkgAEi8KDmNzbF92",
            "YWxpZGF0aW9uGBUgASgLMhUueHBpbG90LkNzbFZhbGlkYXRpb25IAEIFCgNt",
            "c2dCGaoCFlZhdHNpbS5YcGlsb3QuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.XplaneDatarefsReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.PluginInformationReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.CslValidationReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.AddPlaneReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.ChangePlaneModelReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.PositionUpdateReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.DeletePlaneReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.NetworkConnectedReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.NetworkDisconnectedReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.AirplaneConfigReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.NearbyControllersReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.PrivateMessageReceivedReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.PrivateMessageSentReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.SetTransponderReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.FastPositionUpdateReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.PlaneAddedToSimReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.RadioStackReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.UserAircraftDataReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.UserAircraftConfigDataReflection.Descriptor, global::Vatsim.Xpilot.Protobuf.SetRadioStackReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.Wrapper), global::Vatsim.Xpilot.Protobuf.Wrapper.Parser, new[]{ "Timestamp", "UserAircraftData", "UserAircraftConfig", "RadioStack", "PositionUpdate", "FastPositionUpdate", "AirplaneConfig", "AddPlane", "PlaneAddedToSim", "ChangePlaneModel", "DeletePlane", "PrivateMessageReceived", "PrivateMessageSent", "NetworkConnected", "NetworkDisconnected", "NearbyControllers", "SetTransponder", "SetRadiostack", "XplaneDatarefs", "PluginInformation", "CslValidation" }, new[]{ "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Wrapper : pb::IMessage<Wrapper>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Wrapper> _parser = new pb::MessageParser<Wrapper>(() => new Wrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Wrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.WrapperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wrapper(Wrapper other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      switch (other.MsgCase) {
        case MsgOneofCase.UserAircraftData:
          UserAircraftData = other.UserAircraftData.Clone();
          break;
        case MsgOneofCase.UserAircraftConfig:
          UserAircraftConfig = other.UserAircraftConfig.Clone();
          break;
        case MsgOneofCase.RadioStack:
          RadioStack = other.RadioStack.Clone();
          break;
        case MsgOneofCase.PositionUpdate:
          PositionUpdate = other.PositionUpdate.Clone();
          break;
        case MsgOneofCase.FastPositionUpdate:
          FastPositionUpdate = other.FastPositionUpdate.Clone();
          break;
        case MsgOneofCase.AirplaneConfig:
          AirplaneConfig = other.AirplaneConfig.Clone();
          break;
        case MsgOneofCase.AddPlane:
          AddPlane = other.AddPlane.Clone();
          break;
        case MsgOneofCase.PlaneAddedToSim:
          PlaneAddedToSim = other.PlaneAddedToSim.Clone();
          break;
        case MsgOneofCase.ChangePlaneModel:
          ChangePlaneModel = other.ChangePlaneModel.Clone();
          break;
        case MsgOneofCase.DeletePlane:
          DeletePlane = other.DeletePlane.Clone();
          break;
        case MsgOneofCase.PrivateMessageReceived:
          PrivateMessageReceived = other.PrivateMessageReceived.Clone();
          break;
        case MsgOneofCase.PrivateMessageSent:
          PrivateMessageSent = other.PrivateMessageSent.Clone();
          break;
        case MsgOneofCase.NetworkConnected:
          NetworkConnected = other.NetworkConnected.Clone();
          break;
        case MsgOneofCase.NetworkDisconnected:
          NetworkDisconnected = other.NetworkDisconnected.Clone();
          break;
        case MsgOneofCase.NearbyControllers:
          NearbyControllers = other.NearbyControllers.Clone();
          break;
        case MsgOneofCase.SetTransponder:
          SetTransponder = other.SetTransponder.Clone();
          break;
        case MsgOneofCase.SetRadiostack:
          SetRadiostack = other.SetRadiostack.Clone();
          break;
        case MsgOneofCase.XplaneDatarefs:
          XplaneDatarefs = other.XplaneDatarefs.Clone();
          break;
        case MsgOneofCase.PluginInformation:
          PluginInformation = other.PluginInformation.Clone();
          break;
        case MsgOneofCase.CslValidation:
          CslValidation = other.CslValidation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Wrapper Clone() {
      return new Wrapper(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "user_aircraft_data" field.</summary>
    public const int UserAircraftDataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.UserAircraftData UserAircraftData {
      get { return msgCase_ == MsgOneofCase.UserAircraftData ? (global::Vatsim.Xpilot.Protobuf.UserAircraftData) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UserAircraftData;
      }
    }

    /// <summary>Field number for the "user_aircraft_config" field.</summary>
    public const int UserAircraftConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData UserAircraftConfig {
      get { return msgCase_ == MsgOneofCase.UserAircraftConfig ? (global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UserAircraftConfig;
      }
    }

    /// <summary>Field number for the "radio_stack" field.</summary>
    public const int RadioStackFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.RadioStack RadioStack {
      get { return msgCase_ == MsgOneofCase.RadioStack ? (global::Vatsim.Xpilot.Protobuf.RadioStack) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RadioStack;
      }
    }

    /// <summary>Field number for the "position_update" field.</summary>
    public const int PositionUpdateFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.PositionUpdate PositionUpdate {
      get { return msgCase_ == MsgOneofCase.PositionUpdate ? (global::Vatsim.Xpilot.Protobuf.PositionUpdate) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PositionUpdate;
      }
    }

    /// <summary>Field number for the "fast_position_update" field.</summary>
    public const int FastPositionUpdateFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.FastPositionUpdate FastPositionUpdate {
      get { return msgCase_ == MsgOneofCase.FastPositionUpdate ? (global::Vatsim.Xpilot.Protobuf.FastPositionUpdate) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.FastPositionUpdate;
      }
    }

    /// <summary>Field number for the "airplane_config" field.</summary>
    public const int AirplaneConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.AirplaneConfig AirplaneConfig {
      get { return msgCase_ == MsgOneofCase.AirplaneConfig ? (global::Vatsim.Xpilot.Protobuf.AirplaneConfig) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AirplaneConfig;
      }
    }

    /// <summary>Field number for the "add_plane" field.</summary>
    public const int AddPlaneFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.AddPlane AddPlane {
      get { return msgCase_ == MsgOneofCase.AddPlane ? (global::Vatsim.Xpilot.Protobuf.AddPlane) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddPlane;
      }
    }

    /// <summary>Field number for the "plane_added_to_sim" field.</summary>
    public const int PlaneAddedToSimFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim PlaneAddedToSim {
      get { return msgCase_ == MsgOneofCase.PlaneAddedToSim ? (global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PlaneAddedToSim;
      }
    }

    /// <summary>Field number for the "change_plane_model" field.</summary>
    public const int ChangePlaneModelFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.ChangePlaneModel ChangePlaneModel {
      get { return msgCase_ == MsgOneofCase.ChangePlaneModel ? (global::Vatsim.Xpilot.Protobuf.ChangePlaneModel) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ChangePlaneModel;
      }
    }

    /// <summary>Field number for the "delete_plane" field.</summary>
    public const int DeletePlaneFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.DeletePlane DeletePlane {
      get { return msgCase_ == MsgOneofCase.DeletePlane ? (global::Vatsim.Xpilot.Protobuf.DeletePlane) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.DeletePlane;
      }
    }

    /// <summary>Field number for the "private_message_received" field.</summary>
    public const int PrivateMessageReceivedFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived PrivateMessageReceived {
      get { return msgCase_ == MsgOneofCase.PrivateMessageReceived ? (global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PrivateMessageReceived;
      }
    }

    /// <summary>Field number for the "private_message_sent" field.</summary>
    public const int PrivateMessageSentFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.PrivateMessageSent PrivateMessageSent {
      get { return msgCase_ == MsgOneofCase.PrivateMessageSent ? (global::Vatsim.Xpilot.Protobuf.PrivateMessageSent) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PrivateMessageSent;
      }
    }

    /// <summary>Field number for the "network_connected" field.</summary>
    public const int NetworkConnectedFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.NetworkConnected NetworkConnected {
      get { return msgCase_ == MsgOneofCase.NetworkConnected ? (global::Vatsim.Xpilot.Protobuf.NetworkConnected) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.NetworkConnected;
      }
    }

    /// <summary>Field number for the "network_disconnected" field.</summary>
    public const int NetworkDisconnectedFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.NetworkDisconnected NetworkDisconnected {
      get { return msgCase_ == MsgOneofCase.NetworkDisconnected ? (global::Vatsim.Xpilot.Protobuf.NetworkDisconnected) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.NetworkDisconnected;
      }
    }

    /// <summary>Field number for the "nearby_controllers" field.</summary>
    public const int NearbyControllersFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.NearbyControllers NearbyControllers {
      get { return msgCase_ == MsgOneofCase.NearbyControllers ? (global::Vatsim.Xpilot.Protobuf.NearbyControllers) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.NearbyControllers;
      }
    }

    /// <summary>Field number for the "set_transponder" field.</summary>
    public const int SetTransponderFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.SetTransponder SetTransponder {
      get { return msgCase_ == MsgOneofCase.SetTransponder ? (global::Vatsim.Xpilot.Protobuf.SetTransponder) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SetTransponder;
      }
    }

    /// <summary>Field number for the "set_radiostack" field.</summary>
    public const int SetRadiostackFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.SetRadioStack SetRadiostack {
      get { return msgCase_ == MsgOneofCase.SetRadiostack ? (global::Vatsim.Xpilot.Protobuf.SetRadioStack) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SetRadiostack;
      }
    }

    /// <summary>Field number for the "xplane_datarefs" field.</summary>
    public const int XplaneDatarefsFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.XplaneDatarefs XplaneDatarefs {
      get { return msgCase_ == MsgOneofCase.XplaneDatarefs ? (global::Vatsim.Xpilot.Protobuf.XplaneDatarefs) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.XplaneDatarefs;
      }
    }

    /// <summary>Field number for the "plugin_information" field.</summary>
    public const int PluginInformationFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.PluginInformation PluginInformation {
      get { return msgCase_ == MsgOneofCase.PluginInformation ? (global::Vatsim.Xpilot.Protobuf.PluginInformation) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PluginInformation;
      }
    }

    /// <summary>Field number for the "csl_validation" field.</summary>
    public const int CslValidationFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.CslValidation CslValidation {
      get { return msgCase_ == MsgOneofCase.CslValidation ? (global::Vatsim.Xpilot.Protobuf.CslValidation) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CslValidation;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      UserAircraftData = 2,
      UserAircraftConfig = 3,
      RadioStack = 4,
      PositionUpdate = 5,
      FastPositionUpdate = 6,
      AirplaneConfig = 7,
      AddPlane = 8,
      PlaneAddedToSim = 9,
      ChangePlaneModel = 10,
      DeletePlane = 11,
      PrivateMessageReceived = 12,
      PrivateMessageSent = 13,
      NetworkConnected = 14,
      NetworkDisconnected = 15,
      NearbyControllers = 16,
      SetTransponder = 17,
      SetRadiostack = 18,
      XplaneDatarefs = 19,
      PluginInformation = 20,
      CslValidation = 21,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Wrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Wrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(UserAircraftData, other.UserAircraftData)) return false;
      if (!object.Equals(UserAircraftConfig, other.UserAircraftConfig)) return false;
      if (!object.Equals(RadioStack, other.RadioStack)) return false;
      if (!object.Equals(PositionUpdate, other.PositionUpdate)) return false;
      if (!object.Equals(FastPositionUpdate, other.FastPositionUpdate)) return false;
      if (!object.Equals(AirplaneConfig, other.AirplaneConfig)) return false;
      if (!object.Equals(AddPlane, other.AddPlane)) return false;
      if (!object.Equals(PlaneAddedToSim, other.PlaneAddedToSim)) return false;
      if (!object.Equals(ChangePlaneModel, other.ChangePlaneModel)) return false;
      if (!object.Equals(DeletePlane, other.DeletePlane)) return false;
      if (!object.Equals(PrivateMessageReceived, other.PrivateMessageReceived)) return false;
      if (!object.Equals(PrivateMessageSent, other.PrivateMessageSent)) return false;
      if (!object.Equals(NetworkConnected, other.NetworkConnected)) return false;
      if (!object.Equals(NetworkDisconnected, other.NetworkDisconnected)) return false;
      if (!object.Equals(NearbyControllers, other.NearbyControllers)) return false;
      if (!object.Equals(SetTransponder, other.SetTransponder)) return false;
      if (!object.Equals(SetRadiostack, other.SetRadiostack)) return false;
      if (!object.Equals(XplaneDatarefs, other.XplaneDatarefs)) return false;
      if (!object.Equals(PluginInformation, other.PluginInformation)) return false;
      if (!object.Equals(CslValidation, other.CslValidation)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (msgCase_ == MsgOneofCase.UserAircraftData) hash ^= UserAircraftData.GetHashCode();
      if (msgCase_ == MsgOneofCase.UserAircraftConfig) hash ^= UserAircraftConfig.GetHashCode();
      if (msgCase_ == MsgOneofCase.RadioStack) hash ^= RadioStack.GetHashCode();
      if (msgCase_ == MsgOneofCase.PositionUpdate) hash ^= PositionUpdate.GetHashCode();
      if (msgCase_ == MsgOneofCase.FastPositionUpdate) hash ^= FastPositionUpdate.GetHashCode();
      if (msgCase_ == MsgOneofCase.AirplaneConfig) hash ^= AirplaneConfig.GetHashCode();
      if (msgCase_ == MsgOneofCase.AddPlane) hash ^= AddPlane.GetHashCode();
      if (msgCase_ == MsgOneofCase.PlaneAddedToSim) hash ^= PlaneAddedToSim.GetHashCode();
      if (msgCase_ == MsgOneofCase.ChangePlaneModel) hash ^= ChangePlaneModel.GetHashCode();
      if (msgCase_ == MsgOneofCase.DeletePlane) hash ^= DeletePlane.GetHashCode();
      if (msgCase_ == MsgOneofCase.PrivateMessageReceived) hash ^= PrivateMessageReceived.GetHashCode();
      if (msgCase_ == MsgOneofCase.PrivateMessageSent) hash ^= PrivateMessageSent.GetHashCode();
      if (msgCase_ == MsgOneofCase.NetworkConnected) hash ^= NetworkConnected.GetHashCode();
      if (msgCase_ == MsgOneofCase.NetworkDisconnected) hash ^= NetworkDisconnected.GetHashCode();
      if (msgCase_ == MsgOneofCase.NearbyControllers) hash ^= NearbyControllers.GetHashCode();
      if (msgCase_ == MsgOneofCase.SetTransponder) hash ^= SetTransponder.GetHashCode();
      if (msgCase_ == MsgOneofCase.SetRadiostack) hash ^= SetRadiostack.GetHashCode();
      if (msgCase_ == MsgOneofCase.XplaneDatarefs) hash ^= XplaneDatarefs.GetHashCode();
      if (msgCase_ == MsgOneofCase.PluginInformation) hash ^= PluginInformation.GetHashCode();
      if (msgCase_ == MsgOneofCase.CslValidation) hash ^= CslValidation.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (msgCase_ == MsgOneofCase.UserAircraftData) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAircraftData);
      }
      if (msgCase_ == MsgOneofCase.UserAircraftConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(UserAircraftConfig);
      }
      if (msgCase_ == MsgOneofCase.RadioStack) {
        output.WriteRawTag(34);
        output.WriteMessage(RadioStack);
      }
      if (msgCase_ == MsgOneofCase.PositionUpdate) {
        output.WriteRawTag(42);
        output.WriteMessage(PositionUpdate);
      }
      if (msgCase_ == MsgOneofCase.FastPositionUpdate) {
        output.WriteRawTag(50);
        output.WriteMessage(FastPositionUpdate);
      }
      if (msgCase_ == MsgOneofCase.AirplaneConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(AirplaneConfig);
      }
      if (msgCase_ == MsgOneofCase.AddPlane) {
        output.WriteRawTag(66);
        output.WriteMessage(AddPlane);
      }
      if (msgCase_ == MsgOneofCase.PlaneAddedToSim) {
        output.WriteRawTag(74);
        output.WriteMessage(PlaneAddedToSim);
      }
      if (msgCase_ == MsgOneofCase.ChangePlaneModel) {
        output.WriteRawTag(82);
        output.WriteMessage(ChangePlaneModel);
      }
      if (msgCase_ == MsgOneofCase.DeletePlane) {
        output.WriteRawTag(90);
        output.WriteMessage(DeletePlane);
      }
      if (msgCase_ == MsgOneofCase.PrivateMessageReceived) {
        output.WriteRawTag(98);
        output.WriteMessage(PrivateMessageReceived);
      }
      if (msgCase_ == MsgOneofCase.PrivateMessageSent) {
        output.WriteRawTag(106);
        output.WriteMessage(PrivateMessageSent);
      }
      if (msgCase_ == MsgOneofCase.NetworkConnected) {
        output.WriteRawTag(114);
        output.WriteMessage(NetworkConnected);
      }
      if (msgCase_ == MsgOneofCase.NetworkDisconnected) {
        output.WriteRawTag(122);
        output.WriteMessage(NetworkDisconnected);
      }
      if (msgCase_ == MsgOneofCase.NearbyControllers) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NearbyControllers);
      }
      if (msgCase_ == MsgOneofCase.SetTransponder) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SetTransponder);
      }
      if (msgCase_ == MsgOneofCase.SetRadiostack) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SetRadiostack);
      }
      if (msgCase_ == MsgOneofCase.XplaneDatarefs) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(XplaneDatarefs);
      }
      if (msgCase_ == MsgOneofCase.PluginInformation) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PluginInformation);
      }
      if (msgCase_ == MsgOneofCase.CslValidation) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CslValidation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (msgCase_ == MsgOneofCase.UserAircraftData) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAircraftData);
      }
      if (msgCase_ == MsgOneofCase.UserAircraftConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(UserAircraftConfig);
      }
      if (msgCase_ == MsgOneofCase.RadioStack) {
        output.WriteRawTag(34);
        output.WriteMessage(RadioStack);
      }
      if (msgCase_ == MsgOneofCase.PositionUpdate) {
        output.WriteRawTag(42);
        output.WriteMessage(PositionUpdate);
      }
      if (msgCase_ == MsgOneofCase.FastPositionUpdate) {
        output.WriteRawTag(50);
        output.WriteMessage(FastPositionUpdate);
      }
      if (msgCase_ == MsgOneofCase.AirplaneConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(AirplaneConfig);
      }
      if (msgCase_ == MsgOneofCase.AddPlane) {
        output.WriteRawTag(66);
        output.WriteMessage(AddPlane);
      }
      if (msgCase_ == MsgOneofCase.PlaneAddedToSim) {
        output.WriteRawTag(74);
        output.WriteMessage(PlaneAddedToSim);
      }
      if (msgCase_ == MsgOneofCase.ChangePlaneModel) {
        output.WriteRawTag(82);
        output.WriteMessage(ChangePlaneModel);
      }
      if (msgCase_ == MsgOneofCase.DeletePlane) {
        output.WriteRawTag(90);
        output.WriteMessage(DeletePlane);
      }
      if (msgCase_ == MsgOneofCase.PrivateMessageReceived) {
        output.WriteRawTag(98);
        output.WriteMessage(PrivateMessageReceived);
      }
      if (msgCase_ == MsgOneofCase.PrivateMessageSent) {
        output.WriteRawTag(106);
        output.WriteMessage(PrivateMessageSent);
      }
      if (msgCase_ == MsgOneofCase.NetworkConnected) {
        output.WriteRawTag(114);
        output.WriteMessage(NetworkConnected);
      }
      if (msgCase_ == MsgOneofCase.NetworkDisconnected) {
        output.WriteRawTag(122);
        output.WriteMessage(NetworkDisconnected);
      }
      if (msgCase_ == MsgOneofCase.NearbyControllers) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NearbyControllers);
      }
      if (msgCase_ == MsgOneofCase.SetTransponder) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SetTransponder);
      }
      if (msgCase_ == MsgOneofCase.SetRadiostack) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SetRadiostack);
      }
      if (msgCase_ == MsgOneofCase.XplaneDatarefs) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(XplaneDatarefs);
      }
      if (msgCase_ == MsgOneofCase.PluginInformation) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PluginInformation);
      }
      if (msgCase_ == MsgOneofCase.CslValidation) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CslValidation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (msgCase_ == MsgOneofCase.UserAircraftData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAircraftData);
      }
      if (msgCase_ == MsgOneofCase.UserAircraftConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAircraftConfig);
      }
      if (msgCase_ == MsgOneofCase.RadioStack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadioStack);
      }
      if (msgCase_ == MsgOneofCase.PositionUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PositionUpdate);
      }
      if (msgCase_ == MsgOneofCase.FastPositionUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FastPositionUpdate);
      }
      if (msgCase_ == MsgOneofCase.AirplaneConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirplaneConfig);
      }
      if (msgCase_ == MsgOneofCase.AddPlane) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddPlane);
      }
      if (msgCase_ == MsgOneofCase.PlaneAddedToSim) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneAddedToSim);
      }
      if (msgCase_ == MsgOneofCase.ChangePlaneModel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangePlaneModel);
      }
      if (msgCase_ == MsgOneofCase.DeletePlane) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletePlane);
      }
      if (msgCase_ == MsgOneofCase.PrivateMessageReceived) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateMessageReceived);
      }
      if (msgCase_ == MsgOneofCase.PrivateMessageSent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateMessageSent);
      }
      if (msgCase_ == MsgOneofCase.NetworkConnected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkConnected);
      }
      if (msgCase_ == MsgOneofCase.NetworkDisconnected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkDisconnected);
      }
      if (msgCase_ == MsgOneofCase.NearbyControllers) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NearbyControllers);
      }
      if (msgCase_ == MsgOneofCase.SetTransponder) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetTransponder);
      }
      if (msgCase_ == MsgOneofCase.SetRadiostack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetRadiostack);
      }
      if (msgCase_ == MsgOneofCase.XplaneDatarefs) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(XplaneDatarefs);
      }
      if (msgCase_ == MsgOneofCase.PluginInformation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PluginInformation);
      }
      if (msgCase_ == MsgOneofCase.CslValidation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CslValidation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Wrapper other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      switch (other.MsgCase) {
        case MsgOneofCase.UserAircraftData:
          if (UserAircraftData == null) {
            UserAircraftData = new global::Vatsim.Xpilot.Protobuf.UserAircraftData();
          }
          UserAircraftData.MergeFrom(other.UserAircraftData);
          break;
        case MsgOneofCase.UserAircraftConfig:
          if (UserAircraftConfig == null) {
            UserAircraftConfig = new global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData();
          }
          UserAircraftConfig.MergeFrom(other.UserAircraftConfig);
          break;
        case MsgOneofCase.RadioStack:
          if (RadioStack == null) {
            RadioStack = new global::Vatsim.Xpilot.Protobuf.RadioStack();
          }
          RadioStack.MergeFrom(other.RadioStack);
          break;
        case MsgOneofCase.PositionUpdate:
          if (PositionUpdate == null) {
            PositionUpdate = new global::Vatsim.Xpilot.Protobuf.PositionUpdate();
          }
          PositionUpdate.MergeFrom(other.PositionUpdate);
          break;
        case MsgOneofCase.FastPositionUpdate:
          if (FastPositionUpdate == null) {
            FastPositionUpdate = new global::Vatsim.Xpilot.Protobuf.FastPositionUpdate();
          }
          FastPositionUpdate.MergeFrom(other.FastPositionUpdate);
          break;
        case MsgOneofCase.AirplaneConfig:
          if (AirplaneConfig == null) {
            AirplaneConfig = new global::Vatsim.Xpilot.Protobuf.AirplaneConfig();
          }
          AirplaneConfig.MergeFrom(other.AirplaneConfig);
          break;
        case MsgOneofCase.AddPlane:
          if (AddPlane == null) {
            AddPlane = new global::Vatsim.Xpilot.Protobuf.AddPlane();
          }
          AddPlane.MergeFrom(other.AddPlane);
          break;
        case MsgOneofCase.PlaneAddedToSim:
          if (PlaneAddedToSim == null) {
            PlaneAddedToSim = new global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim();
          }
          PlaneAddedToSim.MergeFrom(other.PlaneAddedToSim);
          break;
        case MsgOneofCase.ChangePlaneModel:
          if (ChangePlaneModel == null) {
            ChangePlaneModel = new global::Vatsim.Xpilot.Protobuf.ChangePlaneModel();
          }
          ChangePlaneModel.MergeFrom(other.ChangePlaneModel);
          break;
        case MsgOneofCase.DeletePlane:
          if (DeletePlane == null) {
            DeletePlane = new global::Vatsim.Xpilot.Protobuf.DeletePlane();
          }
          DeletePlane.MergeFrom(other.DeletePlane);
          break;
        case MsgOneofCase.PrivateMessageReceived:
          if (PrivateMessageReceived == null) {
            PrivateMessageReceived = new global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived();
          }
          PrivateMessageReceived.MergeFrom(other.PrivateMessageReceived);
          break;
        case MsgOneofCase.PrivateMessageSent:
          if (PrivateMessageSent == null) {
            PrivateMessageSent = new global::Vatsim.Xpilot.Protobuf.PrivateMessageSent();
          }
          PrivateMessageSent.MergeFrom(other.PrivateMessageSent);
          break;
        case MsgOneofCase.NetworkConnected:
          if (NetworkConnected == null) {
            NetworkConnected = new global::Vatsim.Xpilot.Protobuf.NetworkConnected();
          }
          NetworkConnected.MergeFrom(other.NetworkConnected);
          break;
        case MsgOneofCase.NetworkDisconnected:
          if (NetworkDisconnected == null) {
            NetworkDisconnected = new global::Vatsim.Xpilot.Protobuf.NetworkDisconnected();
          }
          NetworkDisconnected.MergeFrom(other.NetworkDisconnected);
          break;
        case MsgOneofCase.NearbyControllers:
          if (NearbyControllers == null) {
            NearbyControllers = new global::Vatsim.Xpilot.Protobuf.NearbyControllers();
          }
          NearbyControllers.MergeFrom(other.NearbyControllers);
          break;
        case MsgOneofCase.SetTransponder:
          if (SetTransponder == null) {
            SetTransponder = new global::Vatsim.Xpilot.Protobuf.SetTransponder();
          }
          SetTransponder.MergeFrom(other.SetTransponder);
          break;
        case MsgOneofCase.SetRadiostack:
          if (SetRadiostack == null) {
            SetRadiostack = new global::Vatsim.Xpilot.Protobuf.SetRadioStack();
          }
          SetRadiostack.MergeFrom(other.SetRadiostack);
          break;
        case MsgOneofCase.XplaneDatarefs:
          if (XplaneDatarefs == null) {
            XplaneDatarefs = new global::Vatsim.Xpilot.Protobuf.XplaneDatarefs();
          }
          XplaneDatarefs.MergeFrom(other.XplaneDatarefs);
          break;
        case MsgOneofCase.PluginInformation:
          if (PluginInformation == null) {
            PluginInformation = new global::Vatsim.Xpilot.Protobuf.PluginInformation();
          }
          PluginInformation.MergeFrom(other.PluginInformation);
          break;
        case MsgOneofCase.CslValidation:
          if (CslValidation == null) {
            CslValidation = new global::Vatsim.Xpilot.Protobuf.CslValidation();
          }
          CslValidation.MergeFrom(other.CslValidation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            global::Vatsim.Xpilot.Protobuf.UserAircraftData subBuilder = new global::Vatsim.Xpilot.Protobuf.UserAircraftData();
            if (msgCase_ == MsgOneofCase.UserAircraftData) {
              subBuilder.MergeFrom(UserAircraftData);
            }
            input.ReadMessage(subBuilder);
            UserAircraftData = subBuilder;
            break;
          }
          case 26: {
            global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData subBuilder = new global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData();
            if (msgCase_ == MsgOneofCase.UserAircraftConfig) {
              subBuilder.MergeFrom(UserAircraftConfig);
            }
            input.ReadMessage(subBuilder);
            UserAircraftConfig = subBuilder;
            break;
          }
          case 34: {
            global::Vatsim.Xpilot.Protobuf.RadioStack subBuilder = new global::Vatsim.Xpilot.Protobuf.RadioStack();
            if (msgCase_ == MsgOneofCase.RadioStack) {
              subBuilder.MergeFrom(RadioStack);
            }
            input.ReadMessage(subBuilder);
            RadioStack = subBuilder;
            break;
          }
          case 42: {
            global::Vatsim.Xpilot.Protobuf.PositionUpdate subBuilder = new global::Vatsim.Xpilot.Protobuf.PositionUpdate();
            if (msgCase_ == MsgOneofCase.PositionUpdate) {
              subBuilder.MergeFrom(PositionUpdate);
            }
            input.ReadMessage(subBuilder);
            PositionUpdate = subBuilder;
            break;
          }
          case 50: {
            global::Vatsim.Xpilot.Protobuf.FastPositionUpdate subBuilder = new global::Vatsim.Xpilot.Protobuf.FastPositionUpdate();
            if (msgCase_ == MsgOneofCase.FastPositionUpdate) {
              subBuilder.MergeFrom(FastPositionUpdate);
            }
            input.ReadMessage(subBuilder);
            FastPositionUpdate = subBuilder;
            break;
          }
          case 58: {
            global::Vatsim.Xpilot.Protobuf.AirplaneConfig subBuilder = new global::Vatsim.Xpilot.Protobuf.AirplaneConfig();
            if (msgCase_ == MsgOneofCase.AirplaneConfig) {
              subBuilder.MergeFrom(AirplaneConfig);
            }
            input.ReadMessage(subBuilder);
            AirplaneConfig = subBuilder;
            break;
          }
          case 66: {
            global::Vatsim.Xpilot.Protobuf.AddPlane subBuilder = new global::Vatsim.Xpilot.Protobuf.AddPlane();
            if (msgCase_ == MsgOneofCase.AddPlane) {
              subBuilder.MergeFrom(AddPlane);
            }
            input.ReadMessage(subBuilder);
            AddPlane = subBuilder;
            break;
          }
          case 74: {
            global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim subBuilder = new global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim();
            if (msgCase_ == MsgOneofCase.PlaneAddedToSim) {
              subBuilder.MergeFrom(PlaneAddedToSim);
            }
            input.ReadMessage(subBuilder);
            PlaneAddedToSim = subBuilder;
            break;
          }
          case 82: {
            global::Vatsim.Xpilot.Protobuf.ChangePlaneModel subBuilder = new global::Vatsim.Xpilot.Protobuf.ChangePlaneModel();
            if (msgCase_ == MsgOneofCase.ChangePlaneModel) {
              subBuilder.MergeFrom(ChangePlaneModel);
            }
            input.ReadMessage(subBuilder);
            ChangePlaneModel = subBuilder;
            break;
          }
          case 90: {
            global::Vatsim.Xpilot.Protobuf.DeletePlane subBuilder = new global::Vatsim.Xpilot.Protobuf.DeletePlane();
            if (msgCase_ == MsgOneofCase.DeletePlane) {
              subBuilder.MergeFrom(DeletePlane);
            }
            input.ReadMessage(subBuilder);
            DeletePlane = subBuilder;
            break;
          }
          case 98: {
            global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived subBuilder = new global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived();
            if (msgCase_ == MsgOneofCase.PrivateMessageReceived) {
              subBuilder.MergeFrom(PrivateMessageReceived);
            }
            input.ReadMessage(subBuilder);
            PrivateMessageReceived = subBuilder;
            break;
          }
          case 106: {
            global::Vatsim.Xpilot.Protobuf.PrivateMessageSent subBuilder = new global::Vatsim.Xpilot.Protobuf.PrivateMessageSent();
            if (msgCase_ == MsgOneofCase.PrivateMessageSent) {
              subBuilder.MergeFrom(PrivateMessageSent);
            }
            input.ReadMessage(subBuilder);
            PrivateMessageSent = subBuilder;
            break;
          }
          case 114: {
            global::Vatsim.Xpilot.Protobuf.NetworkConnected subBuilder = new global::Vatsim.Xpilot.Protobuf.NetworkConnected();
            if (msgCase_ == MsgOneofCase.NetworkConnected) {
              subBuilder.MergeFrom(NetworkConnected);
            }
            input.ReadMessage(subBuilder);
            NetworkConnected = subBuilder;
            break;
          }
          case 122: {
            global::Vatsim.Xpilot.Protobuf.NetworkDisconnected subBuilder = new global::Vatsim.Xpilot.Protobuf.NetworkDisconnected();
            if (msgCase_ == MsgOneofCase.NetworkDisconnected) {
              subBuilder.MergeFrom(NetworkDisconnected);
            }
            input.ReadMessage(subBuilder);
            NetworkDisconnected = subBuilder;
            break;
          }
          case 130: {
            global::Vatsim.Xpilot.Protobuf.NearbyControllers subBuilder = new global::Vatsim.Xpilot.Protobuf.NearbyControllers();
            if (msgCase_ == MsgOneofCase.NearbyControllers) {
              subBuilder.MergeFrom(NearbyControllers);
            }
            input.ReadMessage(subBuilder);
            NearbyControllers = subBuilder;
            break;
          }
          case 138: {
            global::Vatsim.Xpilot.Protobuf.SetTransponder subBuilder = new global::Vatsim.Xpilot.Protobuf.SetTransponder();
            if (msgCase_ == MsgOneofCase.SetTransponder) {
              subBuilder.MergeFrom(SetTransponder);
            }
            input.ReadMessage(subBuilder);
            SetTransponder = subBuilder;
            break;
          }
          case 146: {
            global::Vatsim.Xpilot.Protobuf.SetRadioStack subBuilder = new global::Vatsim.Xpilot.Protobuf.SetRadioStack();
            if (msgCase_ == MsgOneofCase.SetRadiostack) {
              subBuilder.MergeFrom(SetRadiostack);
            }
            input.ReadMessage(subBuilder);
            SetRadiostack = subBuilder;
            break;
          }
          case 154: {
            global::Vatsim.Xpilot.Protobuf.XplaneDatarefs subBuilder = new global::Vatsim.Xpilot.Protobuf.XplaneDatarefs();
            if (msgCase_ == MsgOneofCase.XplaneDatarefs) {
              subBuilder.MergeFrom(XplaneDatarefs);
            }
            input.ReadMessage(subBuilder);
            XplaneDatarefs = subBuilder;
            break;
          }
          case 162: {
            global::Vatsim.Xpilot.Protobuf.PluginInformation subBuilder = new global::Vatsim.Xpilot.Protobuf.PluginInformation();
            if (msgCase_ == MsgOneofCase.PluginInformation) {
              subBuilder.MergeFrom(PluginInformation);
            }
            input.ReadMessage(subBuilder);
            PluginInformation = subBuilder;
            break;
          }
          case 170: {
            global::Vatsim.Xpilot.Protobuf.CslValidation subBuilder = new global::Vatsim.Xpilot.Protobuf.CslValidation();
            if (msgCase_ == MsgOneofCase.CslValidation) {
              subBuilder.MergeFrom(CslValidation);
            }
            input.ReadMessage(subBuilder);
            CslValidation = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            global::Vatsim.Xpilot.Protobuf.UserAircraftData subBuilder = new global::Vatsim.Xpilot.Protobuf.UserAircraftData();
            if (msgCase_ == MsgOneofCase.UserAircraftData) {
              subBuilder.MergeFrom(UserAircraftData);
            }
            input.ReadMessage(subBuilder);
            UserAircraftData = subBuilder;
            break;
          }
          case 26: {
            global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData subBuilder = new global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData();
            if (msgCase_ == MsgOneofCase.UserAircraftConfig) {
              subBuilder.MergeFrom(UserAircraftConfig);
            }
            input.ReadMessage(subBuilder);
            UserAircraftConfig = subBuilder;
            break;
          }
          case 34: {
            global::Vatsim.Xpilot.Protobuf.RadioStack subBuilder = new global::Vatsim.Xpilot.Protobuf.RadioStack();
            if (msgCase_ == MsgOneofCase.RadioStack) {
              subBuilder.MergeFrom(RadioStack);
            }
            input.ReadMessage(subBuilder);
            RadioStack = subBuilder;
            break;
          }
          case 42: {
            global::Vatsim.Xpilot.Protobuf.PositionUpdate subBuilder = new global::Vatsim.Xpilot.Protobuf.PositionUpdate();
            if (msgCase_ == MsgOneofCase.PositionUpdate) {
              subBuilder.MergeFrom(PositionUpdate);
            }
            input.ReadMessage(subBuilder);
            PositionUpdate = subBuilder;
            break;
          }
          case 50: {
            global::Vatsim.Xpilot.Protobuf.FastPositionUpdate subBuilder = new global::Vatsim.Xpilot.Protobuf.FastPositionUpdate();
            if (msgCase_ == MsgOneofCase.FastPositionUpdate) {
              subBuilder.MergeFrom(FastPositionUpdate);
            }
            input.ReadMessage(subBuilder);
            FastPositionUpdate = subBuilder;
            break;
          }
          case 58: {
            global::Vatsim.Xpilot.Protobuf.AirplaneConfig subBuilder = new global::Vatsim.Xpilot.Protobuf.AirplaneConfig();
            if (msgCase_ == MsgOneofCase.AirplaneConfig) {
              subBuilder.MergeFrom(AirplaneConfig);
            }
            input.ReadMessage(subBuilder);
            AirplaneConfig = subBuilder;
            break;
          }
          case 66: {
            global::Vatsim.Xpilot.Protobuf.AddPlane subBuilder = new global::Vatsim.Xpilot.Protobuf.AddPlane();
            if (msgCase_ == MsgOneofCase.AddPlane) {
              subBuilder.MergeFrom(AddPlane);
            }
            input.ReadMessage(subBuilder);
            AddPlane = subBuilder;
            break;
          }
          case 74: {
            global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim subBuilder = new global::Vatsim.Xpilot.Protobuf.PlaneAddedToSim();
            if (msgCase_ == MsgOneofCase.PlaneAddedToSim) {
              subBuilder.MergeFrom(PlaneAddedToSim);
            }
            input.ReadMessage(subBuilder);
            PlaneAddedToSim = subBuilder;
            break;
          }
          case 82: {
            global::Vatsim.Xpilot.Protobuf.ChangePlaneModel subBuilder = new global::Vatsim.Xpilot.Protobuf.ChangePlaneModel();
            if (msgCase_ == MsgOneofCase.ChangePlaneModel) {
              subBuilder.MergeFrom(ChangePlaneModel);
            }
            input.ReadMessage(subBuilder);
            ChangePlaneModel = subBuilder;
            break;
          }
          case 90: {
            global::Vatsim.Xpilot.Protobuf.DeletePlane subBuilder = new global::Vatsim.Xpilot.Protobuf.DeletePlane();
            if (msgCase_ == MsgOneofCase.DeletePlane) {
              subBuilder.MergeFrom(DeletePlane);
            }
            input.ReadMessage(subBuilder);
            DeletePlane = subBuilder;
            break;
          }
          case 98: {
            global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived subBuilder = new global::Vatsim.Xpilot.Protobuf.PrivateMessageReceived();
            if (msgCase_ == MsgOneofCase.PrivateMessageReceived) {
              subBuilder.MergeFrom(PrivateMessageReceived);
            }
            input.ReadMessage(subBuilder);
            PrivateMessageReceived = subBuilder;
            break;
          }
          case 106: {
            global::Vatsim.Xpilot.Protobuf.PrivateMessageSent subBuilder = new global::Vatsim.Xpilot.Protobuf.PrivateMessageSent();
            if (msgCase_ == MsgOneofCase.PrivateMessageSent) {
              subBuilder.MergeFrom(PrivateMessageSent);
            }
            input.ReadMessage(subBuilder);
            PrivateMessageSent = subBuilder;
            break;
          }
          case 114: {
            global::Vatsim.Xpilot.Protobuf.NetworkConnected subBuilder = new global::Vatsim.Xpilot.Protobuf.NetworkConnected();
            if (msgCase_ == MsgOneofCase.NetworkConnected) {
              subBuilder.MergeFrom(NetworkConnected);
            }
            input.ReadMessage(subBuilder);
            NetworkConnected = subBuilder;
            break;
          }
          case 122: {
            global::Vatsim.Xpilot.Protobuf.NetworkDisconnected subBuilder = new global::Vatsim.Xpilot.Protobuf.NetworkDisconnected();
            if (msgCase_ == MsgOneofCase.NetworkDisconnected) {
              subBuilder.MergeFrom(NetworkDisconnected);
            }
            input.ReadMessage(subBuilder);
            NetworkDisconnected = subBuilder;
            break;
          }
          case 130: {
            global::Vatsim.Xpilot.Protobuf.NearbyControllers subBuilder = new global::Vatsim.Xpilot.Protobuf.NearbyControllers();
            if (msgCase_ == MsgOneofCase.NearbyControllers) {
              subBuilder.MergeFrom(NearbyControllers);
            }
            input.ReadMessage(subBuilder);
            NearbyControllers = subBuilder;
            break;
          }
          case 138: {
            global::Vatsim.Xpilot.Protobuf.SetTransponder subBuilder = new global::Vatsim.Xpilot.Protobuf.SetTransponder();
            if (msgCase_ == MsgOneofCase.SetTransponder) {
              subBuilder.MergeFrom(SetTransponder);
            }
            input.ReadMessage(subBuilder);
            SetTransponder = subBuilder;
            break;
          }
          case 146: {
            global::Vatsim.Xpilot.Protobuf.SetRadioStack subBuilder = new global::Vatsim.Xpilot.Protobuf.SetRadioStack();
            if (msgCase_ == MsgOneofCase.SetRadiostack) {
              subBuilder.MergeFrom(SetRadiostack);
            }
            input.ReadMessage(subBuilder);
            SetRadiostack = subBuilder;
            break;
          }
          case 154: {
            global::Vatsim.Xpilot.Protobuf.XplaneDatarefs subBuilder = new global::Vatsim.Xpilot.Protobuf.XplaneDatarefs();
            if (msgCase_ == MsgOneofCase.XplaneDatarefs) {
              subBuilder.MergeFrom(XplaneDatarefs);
            }
            input.ReadMessage(subBuilder);
            XplaneDatarefs = subBuilder;
            break;
          }
          case 162: {
            global::Vatsim.Xpilot.Protobuf.PluginInformation subBuilder = new global::Vatsim.Xpilot.Protobuf.PluginInformation();
            if (msgCase_ == MsgOneofCase.PluginInformation) {
              subBuilder.MergeFrom(PluginInformation);
            }
            input.ReadMessage(subBuilder);
            PluginInformation = subBuilder;
            break;
          }
          case 170: {
            global::Vatsim.Xpilot.Protobuf.CslValidation subBuilder = new global::Vatsim.Xpilot.Protobuf.CslValidation();
            if (msgCase_ == MsgOneofCase.CslValidation) {
              subBuilder.MergeFrom(CslValidation);
            }
            input.ReadMessage(subBuilder);
            CslValidation = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
