/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SetRadioStack.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from SetRadioStack.proto</summary>
  public static partial class SetRadioStackReflection {

    #region Descriptor
    /// <summary>File descriptor for SetRadioStack.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SetRadioStackReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTZXRSYWRpb1N0YWNrLnByb3RvEgZ4cGlsb3QiuQEKDVNldFJhZGlvU3Rh",
            "Y2sSEgoFcmFkaW8YASABKAVIAIgBARIWCglmcmVxdWVuY3kYAiABKAVIAYgB",
            "ARIdChB0cmFuc21pdF9lbmFibGVkGAMgASgISAKIAQESHAoPcmVjZWl2ZV9l",
            "bmFibGVkGAQgASgISAOIAQFCCAoGX3JhZGlvQgwKCl9mcmVxdWVuY3lCEwoR",
            "X3RyYW5zbWl0X2VuYWJsZWRCEgoQX3JlY2VpdmVfZW5hYmxlZEIZqgIWVmF0",
            "c2ltLlhwaWxvdC5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.SetRadioStack), global::Vatsim.Xpilot.Protobuf.SetRadioStack.Parser, new[]{ "Radio", "Frequency", "TransmitEnabled", "ReceiveEnabled" }, new[]{ "Radio", "Frequency", "TransmitEnabled", "ReceiveEnabled" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SetRadioStack : pb::IMessage<SetRadioStack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetRadioStack> _parser = new pb::MessageParser<SetRadioStack>(() => new SetRadioStack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRadioStack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.SetRadioStackReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRadioStack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRadioStack(SetRadioStack other) : this() {
      _hasBits0 = other._hasBits0;
      radio_ = other.radio_;
      frequency_ = other.frequency_;
      transmitEnabled_ = other.transmitEnabled_;
      receiveEnabled_ = other.receiveEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRadioStack Clone() {
      return new SetRadioStack(this);
    }

    /// <summary>Field number for the "radio" field.</summary>
    public const int RadioFieldNumber = 1;
    private int radio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radio {
      get { if ((_hasBits0 & 1) != 0) { return radio_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        radio_ = value;
      }
    }
    /// <summary>Gets whether the "radio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRadio {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "radio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRadio() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 2;
    private int frequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frequency {
      get { if ((_hasBits0 & 2) != 0) { return frequency_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        frequency_ = value;
      }
    }
    /// <summary>Gets whether the "frequency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrequency {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "frequency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrequency() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "transmit_enabled" field.</summary>
    public const int TransmitEnabledFieldNumber = 3;
    private bool transmitEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransmitEnabled {
      get { if ((_hasBits0 & 4) != 0) { return transmitEnabled_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        transmitEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "transmit_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransmitEnabled {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "transmit_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransmitEnabled() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "receive_enabled" field.</summary>
    public const int ReceiveEnabledFieldNumber = 4;
    private bool receiveEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveEnabled {
      get { if ((_hasBits0 & 8) != 0) { return receiveEnabled_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        receiveEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "receive_enabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReceiveEnabled {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "receive_enabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReceiveEnabled() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRadioStack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRadioStack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radio != other.Radio) return false;
      if (Frequency != other.Frequency) return false;
      if (TransmitEnabled != other.TransmitEnabled) return false;
      if (ReceiveEnabled != other.ReceiveEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRadio) hash ^= Radio.GetHashCode();
      if (HasFrequency) hash ^= Frequency.GetHashCode();
      if (HasTransmitEnabled) hash ^= TransmitEnabled.GetHashCode();
      if (HasReceiveEnabled) hash ^= ReceiveEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRadio) {
        output.WriteRawTag(8);
        output.WriteInt32(Radio);
      }
      if (HasFrequency) {
        output.WriteRawTag(16);
        output.WriteInt32(Frequency);
      }
      if (HasTransmitEnabled) {
        output.WriteRawTag(24);
        output.WriteBool(TransmitEnabled);
      }
      if (HasReceiveEnabled) {
        output.WriteRawTag(32);
        output.WriteBool(ReceiveEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRadio) {
        output.WriteRawTag(8);
        output.WriteInt32(Radio);
      }
      if (HasFrequency) {
        output.WriteRawTag(16);
        output.WriteInt32(Frequency);
      }
      if (HasTransmitEnabled) {
        output.WriteRawTag(24);
        output.WriteBool(TransmitEnabled);
      }
      if (HasReceiveEnabled) {
        output.WriteRawTag(32);
        output.WriteBool(ReceiveEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRadio) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radio);
      }
      if (HasFrequency) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frequency);
      }
      if (HasTransmitEnabled) {
        size += 1 + 1;
      }
      if (HasReceiveEnabled) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRadioStack other) {
      if (other == null) {
        return;
      }
      if (other.HasRadio) {
        Radio = other.Radio;
      }
      if (other.HasFrequency) {
        Frequency = other.Frequency;
      }
      if (other.HasTransmitEnabled) {
        TransmitEnabled = other.TransmitEnabled;
      }
      if (other.HasReceiveEnabled) {
        ReceiveEnabled = other.ReceiveEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Radio = input.ReadInt32();
            break;
          }
          case 16: {
            Frequency = input.ReadInt32();
            break;
          }
          case 24: {
            TransmitEnabled = input.ReadBool();
            break;
          }
          case 32: {
            ReceiveEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Radio = input.ReadInt32();
            break;
          }
          case 16: {
            Frequency = input.ReadInt32();
            break;
          }
          case 24: {
            TransmitEnabled = input.ReadBool();
            break;
          }
          case 32: {
            ReceiveEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
