/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: XplaneData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from XplaneData.proto</summary>
  public static partial class XplaneDataReflection {

    #region Descriptor
    /// <summary>File descriptor for XplaneData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XplaneDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBYcGxhbmVEYXRhLnByb3RvEgZ4cGlsb3QigBIKClhwbGFuZURhdGESRAoS",
            "dXNlcl9haXJjcmFmdF9kYXRhGAEgASgLMiMueHBpbG90LlhwbGFuZURhdGEu",
            "VXNlckFpcmNyYWZ0RGF0YUgAiAEBEkwKFHVzZXJfYWlyY3JhZnRfY29uZmln",
            "GAIgASgLMikueHBpbG90LlhwbGFuZURhdGEuVXNlckFpcmNyYWZ0Q29uZmln",
            "RGF0YUgBiAEBEjcKC3JhZGlvX3N0YWNrGAMgASgLMh0ueHBpbG90LlhwbGFu",
            "ZURhdGEuUmFkaW9TdGFja0gCiAEBEhgKC3JlcGxheV9tb2RlGAQgASgISAOI",
            "AQEa6gQKEFVzZXJBaXJjcmFmdERhdGESFgoJbG9uZ2l0dWRlGAEgASgBSACI",
            "AQESFQoIbGF0aXR1ZGUYAiABKAFIAYgBARIZCgxhbHRpdHVkZV9tc2wYAyAB",
            "KAFIAogBARIZCgxhbHRpdHVkZV9hZ2wYBCABKAFIA4gBARIZCgxncm91bmRf",
            "c3BlZWQYBSABKAFIBIgBARISCgVwaXRjaBgGIAEoAUgFiAEBEhEKBHJvbGwY",
            "ByABKAFIBogBARIQCgN5YXcYCCABKAFIB4gBARIeChF2ZWxvY2l0eV9sYXRp",
            "dHVkZRgJIAEoAUgIiAEBEh4KEXZlbG9jaXR5X2FsdGl0dWRlGAogASgBSAmI",
            "AQESHwoSdmVsb2NpdHlfbG9uZ2l0dWRlGAsgASgBSAqIAQESGwoOdmVsb2Np",
            "dHlfcGl0Y2gYDCABKAFIC4gBARIdChB2ZWxvY2l0eV9oZWFkaW5nGA0gASgB",
            "SAyIAQESGgoNdmVsb2NpdHlfYmFuaxgOIAEoAUgNiAEBQgwKCl9sb25naXR1",
            "ZGVCCwoJX2xhdGl0dWRlQg8KDV9hbHRpdHVkZV9tc2xCDwoNX2FsdGl0dWRl",
            "X2FnbEIPCg1fZ3JvdW5kX3NwZWVkQggKBl9waXRjaEIHCgVfcm9sbEIGCgRf",
            "eWF3QhQKEl92ZWxvY2l0eV9sYXRpdHVkZUIUChJfdmVsb2NpdHlfYWx0aXR1",
            "ZGVCFQoTX3ZlbG9jaXR5X2xvbmdpdHVkZUIRCg9fdmVsb2NpdHlfcGl0Y2hC",
            "EwoRX3ZlbG9jaXR5X2hlYWRpbmdCEAoOX3ZlbG9jaXR5X2JhbmsangUKFlVz",
            "ZXJBaXJjcmFmdENvbmZpZ0RhdGESHQoQYmVhY29uX2xpZ2h0c19vbhgBIAEo",
            "CEgAiAEBEh4KEWxhbmRpbmdfbGlnaHRzX29uGAIgASgISAGIAQESGgoNbmF2",
            "X2xpZ2h0c19vbhgDIAEoCEgCiAEBEh0KEHN0cm9iZV9saWdodHNfb24YBCAB",
            "KAhIA4gBARIbCg50YXhpX2xpZ2h0c19vbhgFIAEoCEgEiAEBEhIKBWZsYXBz",
            "GAYgASgBSAWIAQESFgoJZ2Vhcl9kb3duGAcgASgISAaIAQESGQoMc3BlZWRf",
            "YnJha2VzGAggASgBSAeIAQESGQoMZW5naW5lX2NvdW50GAkgASgFSAiIAQES",
            "HAoPZW5naW5lMV9ydW5uaW5nGAogASgISAmIAQESHAoPZW5naW5lMl9ydW5u",
            "aW5nGAsgASgISAqIAQESHAoPZW5naW5lM19ydW5uaW5nGAwgASgISAuIAQES",
            "HAoPZW5naW5lNF9ydW5uaW5nGA0gASgISAyIAQESFgoJb25fZ3JvdW5kGA4g",
            "ASgISA2IAQFCEwoRX2JlYWNvbl9saWdodHNfb25CFAoSX2xhbmRpbmdfbGln",
            "aHRzX29uQhAKDl9uYXZfbGlnaHRzX29uQhMKEV9zdHJvYmVfbGlnaHRzX29u",
            "QhEKD190YXhpX2xpZ2h0c19vbkIICgZfZmxhcHNCDAoKX2dlYXJfZG93bkIP",
            "Cg1fc3BlZWRfYnJha2VzQg8KDV9lbmdpbmVfY291bnRCEgoQX2VuZ2luZTFf",
            "cnVubmluZ0ISChBfZW5naW5lMl9ydW5uaW5nQhIKEF9lbmdpbmUzX3J1bm5p",
            "bmdCEgoQX2VuZ2luZTRfcnVubmluZ0IMCgpfb25fZ3JvdW5kGqwFCgpSYWRp",
            "b1N0YWNrEiAKE2F1ZGlvX2NvbV9zZWxlY3Rpb24YASABKAVIAIgBARIXCgpj",
            "b20xX3Bvd2VyGAIgASgISAGIAQESFgoJY29tMV9mcmVxGAMgASgFSAKIAQES",
            "IQoUY29tMV9hdWRpb19zZWxlY3Rpb24YBCABKAhIA4gBARIYCgtjb20xX3Zv",
            "bHVtZRgFIAEoAkgEiAEBEhcKCmNvbTJfcG93ZXIYBiABKAhIBYgBARIWCglj",
            "b20yX2ZyZXEYByABKAVIBogBARIhChRjb20yX2F1ZGlvX3NlbGVjdGlvbhgI",
            "IAEoCEgHiAEBEhgKC2NvbTJfdm9sdW1lGAkgASgCSAiIAQESHgoRYXZpb25p",
            "Y3NfcG93ZXJfb24YCiABKAhICYgBARIdChB0cmFuc3BvbmRlcl9jb2RlGAsg",
            "ASgFSAqIAQESHQoQdHJhbnNwb25kZXJfbW9kZRgMIAEoBUgLiAEBEh4KEXRy",
            "YW5zcG9uZGVyX2lkZW50GA0gASgISAyIAQESGAoLcHR0X3ByZXNzZWQYDiAB",
            "KAhIDYgBAUIWChRfYXVkaW9fY29tX3NlbGVjdGlvbkINCgtfY29tMV9wb3dl",
            "ckIMCgpfY29tMV9mcmVxQhcKFV9jb20xX2F1ZGlvX3NlbGVjdGlvbkIOCgxf",
            "Y29tMV92b2x1bWVCDQoLX2NvbTJfcG93ZXJCDAoKX2NvbTJfZnJlcUIXChVf",
            "Y29tMl9hdWRpb19zZWxlY3Rpb25CDgoMX2NvbTJfdm9sdW1lQhQKEl9hdmlv",
            "bmljc19wb3dlcl9vbkITChFfdHJhbnNwb25kZXJfY29kZUITChFfdHJhbnNw",
            "b25kZXJfbW9kZUIUChJfdHJhbnNwb25kZXJfaWRlbnRCDgoMX3B0dF9wcmVz",
            "c2VkQhUKE191c2VyX2FpcmNyYWZ0X2RhdGFCFwoVX3VzZXJfYWlyY3JhZnRf",
            "Y29uZmlnQg4KDF9yYWRpb19zdGFja0IOCgxfcmVwbGF5X21vZGVCGaoCFlZh",
            "dHNpbS5YcGlsb3QuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.XplaneData), global::Vatsim.Xpilot.Protobuf.XplaneData.Parser, new[]{ "UserAircraftData", "UserAircraftConfig", "RadioStack", "ReplayMode" }, new[]{ "UserAircraftData", "UserAircraftConfig", "RadioStack", "ReplayMode" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData), global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData.Parser, new[]{ "Longitude", "Latitude", "AltitudeMsl", "AltitudeAgl", "GroundSpeed", "Pitch", "Roll", "Yaw", "VelocityLatitude", "VelocityAltitude", "VelocityLongitude", "VelocityPitch", "VelocityHeading", "VelocityBank" }, new[]{ "Longitude", "Latitude", "AltitudeMsl", "AltitudeAgl", "GroundSpeed", "Pitch", "Roll", "Yaw", "VelocityLatitude", "VelocityAltitude", "VelocityLongitude", "VelocityPitch", "VelocityHeading", "VelocityBank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData), global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData.Parser, new[]{ "BeaconLightsOn", "LandingLightsOn", "NavLightsOn", "StrobeLightsOn", "TaxiLightsOn", "Flaps", "GearDown", "SpeedBrakes", "EngineCount", "Engine1Running", "Engine2Running", "Engine3Running", "Engine4Running", "OnGround" }, new[]{ "BeaconLightsOn", "LandingLightsOn", "NavLightsOn", "StrobeLightsOn", "TaxiLightsOn", "Flaps", "GearDown", "SpeedBrakes", "EngineCount", "Engine1Running", "Engine2Running", "Engine3Running", "Engine4Running", "OnGround" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack), global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack.Parser, new[]{ "AudioComSelection", "Com1Power", "Com1Freq", "Com1AudioSelection", "Com1Volume", "Com2Power", "Com2Freq", "Com2AudioSelection", "Com2Volume", "AvionicsPowerOn", "TransponderCode", "TransponderMode", "TransponderIdent", "PttPressed" }, new[]{ "AudioComSelection", "Com1Power", "Com1Freq", "Com1AudioSelection", "Com1Volume", "Com2Power", "Com2Freq", "Com2AudioSelection", "Com2Volume", "AvionicsPowerOn", "TransponderCode", "TransponderMode", "TransponderIdent", "PttPressed" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class XplaneData : pb::IMessage<XplaneData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<XplaneData> _parser = new pb::MessageParser<XplaneData>(() => new XplaneData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XplaneData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.XplaneDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XplaneData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XplaneData(XplaneData other) : this() {
      _hasBits0 = other._hasBits0;
      userAircraftData_ = other.userAircraftData_ != null ? other.userAircraftData_.Clone() : null;
      userAircraftConfig_ = other.userAircraftConfig_ != null ? other.userAircraftConfig_.Clone() : null;
      radioStack_ = other.radioStack_ != null ? other.radioStack_.Clone() : null;
      replayMode_ = other.replayMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XplaneData Clone() {
      return new XplaneData(this);
    }

    /// <summary>Field number for the "user_aircraft_data" field.</summary>
    public const int UserAircraftDataFieldNumber = 1;
    private global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData userAircraftData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData UserAircraftData {
      get { return userAircraftData_; }
      set {
        userAircraftData_ = value;
      }
    }

    /// <summary>Field number for the "user_aircraft_config" field.</summary>
    public const int UserAircraftConfigFieldNumber = 2;
    private global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData userAircraftConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData UserAircraftConfig {
      get { return userAircraftConfig_; }
      set {
        userAircraftConfig_ = value;
      }
    }

    /// <summary>Field number for the "radio_stack" field.</summary>
    public const int RadioStackFieldNumber = 3;
    private global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack radioStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack RadioStack {
      get { return radioStack_; }
      set {
        radioStack_ = value;
      }
    }

    /// <summary>Field number for the "replay_mode" field.</summary>
    public const int ReplayModeFieldNumber = 4;
    private bool replayMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReplayMode {
      get { if ((_hasBits0 & 1) != 0) { return replayMode_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        replayMode_ = value;
      }
    }
    /// <summary>Gets whether the "replay_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplayMode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "replay_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplayMode() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XplaneData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XplaneData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAircraftData, other.UserAircraftData)) return false;
      if (!object.Equals(UserAircraftConfig, other.UserAircraftConfig)) return false;
      if (!object.Equals(RadioStack, other.RadioStack)) return false;
      if (ReplayMode != other.ReplayMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAircraftData_ != null) hash ^= UserAircraftData.GetHashCode();
      if (userAircraftConfig_ != null) hash ^= UserAircraftConfig.GetHashCode();
      if (radioStack_ != null) hash ^= RadioStack.GetHashCode();
      if (HasReplayMode) hash ^= ReplayMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (userAircraftData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAircraftData);
      }
      if (userAircraftConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAircraftConfig);
      }
      if (radioStack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RadioStack);
      }
      if (HasReplayMode) {
        output.WriteRawTag(32);
        output.WriteBool(ReplayMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (userAircraftData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAircraftData);
      }
      if (userAircraftConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserAircraftConfig);
      }
      if (radioStack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RadioStack);
      }
      if (HasReplayMode) {
        output.WriteRawTag(32);
        output.WriteBool(ReplayMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAircraftData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAircraftData);
      }
      if (userAircraftConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAircraftConfig);
      }
      if (radioStack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RadioStack);
      }
      if (HasReplayMode) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XplaneData other) {
      if (other == null) {
        return;
      }
      if (other.userAircraftData_ != null) {
        if (userAircraftData_ == null) {
          UserAircraftData = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData();
        }
        UserAircraftData.MergeFrom(other.UserAircraftData);
      }
      if (other.userAircraftConfig_ != null) {
        if (userAircraftConfig_ == null) {
          UserAircraftConfig = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData();
        }
        UserAircraftConfig.MergeFrom(other.UserAircraftConfig);
      }
      if (other.radioStack_ != null) {
        if (radioStack_ == null) {
          RadioStack = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack();
        }
        RadioStack.MergeFrom(other.RadioStack);
      }
      if (other.HasReplayMode) {
        ReplayMode = other.ReplayMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAircraftData_ == null) {
              UserAircraftData = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData();
            }
            input.ReadMessage(UserAircraftData);
            break;
          }
          case 18: {
            if (userAircraftConfig_ == null) {
              UserAircraftConfig = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData();
            }
            input.ReadMessage(UserAircraftConfig);
            break;
          }
          case 26: {
            if (radioStack_ == null) {
              RadioStack = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack();
            }
            input.ReadMessage(RadioStack);
            break;
          }
          case 32: {
            ReplayMode = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (userAircraftData_ == null) {
              UserAircraftData = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftData();
            }
            input.ReadMessage(UserAircraftData);
            break;
          }
          case 18: {
            if (userAircraftConfig_ == null) {
              UserAircraftConfig = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.UserAircraftConfigData();
            }
            input.ReadMessage(UserAircraftConfig);
            break;
          }
          case 26: {
            if (radioStack_ == null) {
              RadioStack = new global::Vatsim.Xpilot.Protobuf.XplaneData.Types.RadioStack();
            }
            input.ReadMessage(RadioStack);
            break;
          }
          case 32: {
            ReplayMode = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the XplaneData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UserAircraftData : pb::IMessage<UserAircraftData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UserAircraftData> _parser = new pb::MessageParser<UserAircraftData>(() => new UserAircraftData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserAircraftData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vatsim.Xpilot.Protobuf.XplaneData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAircraftData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAircraftData(UserAircraftData other) : this() {
          _hasBits0 = other._hasBits0;
          longitude_ = other.longitude_;
          latitude_ = other.latitude_;
          altitudeMsl_ = other.altitudeMsl_;
          altitudeAgl_ = other.altitudeAgl_;
          groundSpeed_ = other.groundSpeed_;
          pitch_ = other.pitch_;
          roll_ = other.roll_;
          yaw_ = other.yaw_;
          velocityLatitude_ = other.velocityLatitude_;
          velocityAltitude_ = other.velocityAltitude_;
          velocityLongitude_ = other.velocityLongitude_;
          velocityPitch_ = other.velocityPitch_;
          velocityHeading_ = other.velocityHeading_;
          velocityBank_ = other.velocityBank_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAircraftData Clone() {
          return new UserAircraftData(this);
        }

        /// <summary>Field number for the "longitude" field.</summary>
        public const int LongitudeFieldNumber = 1;
        private double longitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Longitude {
          get { if ((_hasBits0 & 1) != 0) { return longitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 1;
            longitude_ = value;
          }
        }
        /// <summary>Gets whether the "longitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLongitude {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "longitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLongitude() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "latitude" field.</summary>
        public const int LatitudeFieldNumber = 2;
        private double latitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Latitude {
          get { if ((_hasBits0 & 2) != 0) { return latitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 2;
            latitude_ = value;
          }
        }
        /// <summary>Gets whether the "latitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLatitude {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "latitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLatitude() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "altitude_msl" field.</summary>
        public const int AltitudeMslFieldNumber = 3;
        private double altitudeMsl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AltitudeMsl {
          get { if ((_hasBits0 & 4) != 0) { return altitudeMsl_; } else { return 0D; } }
          set {
            _hasBits0 |= 4;
            altitudeMsl_ = value;
          }
        }
        /// <summary>Gets whether the "altitude_msl" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAltitudeMsl {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "altitude_msl" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAltitudeMsl() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "altitude_agl" field.</summary>
        public const int AltitudeAglFieldNumber = 4;
        private double altitudeAgl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AltitudeAgl {
          get { if ((_hasBits0 & 8) != 0) { return altitudeAgl_; } else { return 0D; } }
          set {
            _hasBits0 |= 8;
            altitudeAgl_ = value;
          }
        }
        /// <summary>Gets whether the "altitude_agl" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAltitudeAgl {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "altitude_agl" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAltitudeAgl() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "ground_speed" field.</summary>
        public const int GroundSpeedFieldNumber = 5;
        private double groundSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GroundSpeed {
          get { if ((_hasBits0 & 16) != 0) { return groundSpeed_; } else { return 0D; } }
          set {
            _hasBits0 |= 16;
            groundSpeed_ = value;
          }
        }
        /// <summary>Gets whether the "ground_speed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGroundSpeed {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "ground_speed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGroundSpeed() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "pitch" field.</summary>
        public const int PitchFieldNumber = 6;
        private double pitch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Pitch {
          get { if ((_hasBits0 & 32) != 0) { return pitch_; } else { return 0D; } }
          set {
            _hasBits0 |= 32;
            pitch_ = value;
          }
        }
        /// <summary>Gets whether the "pitch" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPitch {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "pitch" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPitch() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "roll" field.</summary>
        public const int RollFieldNumber = 7;
        private double roll_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Roll {
          get { if ((_hasBits0 & 64) != 0) { return roll_; } else { return 0D; } }
          set {
            _hasBits0 |= 64;
            roll_ = value;
          }
        }
        /// <summary>Gets whether the "roll" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRoll {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "roll" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRoll() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "yaw" field.</summary>
        public const int YawFieldNumber = 8;
        private double yaw_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Yaw {
          get { if ((_hasBits0 & 128) != 0) { return yaw_; } else { return 0D; } }
          set {
            _hasBits0 |= 128;
            yaw_ = value;
          }
        }
        /// <summary>Gets whether the "yaw" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasYaw {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "yaw" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearYaw() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "velocity_latitude" field.</summary>
        public const int VelocityLatitudeFieldNumber = 9;
        private double velocityLatitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VelocityLatitude {
          get { if ((_hasBits0 & 256) != 0) { return velocityLatitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 256;
            velocityLatitude_ = value;
          }
        }
        /// <summary>Gets whether the "velocity_latitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVelocityLatitude {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "velocity_latitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVelocityLatitude() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "velocity_altitude" field.</summary>
        public const int VelocityAltitudeFieldNumber = 10;
        private double velocityAltitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VelocityAltitude {
          get { if ((_hasBits0 & 512) != 0) { return velocityAltitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 512;
            velocityAltitude_ = value;
          }
        }
        /// <summary>Gets whether the "velocity_altitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVelocityAltitude {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "velocity_altitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVelocityAltitude() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "velocity_longitude" field.</summary>
        public const int VelocityLongitudeFieldNumber = 11;
        private double velocityLongitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VelocityLongitude {
          get { if ((_hasBits0 & 1024) != 0) { return velocityLongitude_; } else { return 0D; } }
          set {
            _hasBits0 |= 1024;
            velocityLongitude_ = value;
          }
        }
        /// <summary>Gets whether the "velocity_longitude" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVelocityLongitude {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "velocity_longitude" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVelocityLongitude() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "velocity_pitch" field.</summary>
        public const int VelocityPitchFieldNumber = 12;
        private double velocityPitch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VelocityPitch {
          get { if ((_hasBits0 & 2048) != 0) { return velocityPitch_; } else { return 0D; } }
          set {
            _hasBits0 |= 2048;
            velocityPitch_ = value;
          }
        }
        /// <summary>Gets whether the "velocity_pitch" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVelocityPitch {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "velocity_pitch" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVelocityPitch() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "velocity_heading" field.</summary>
        public const int VelocityHeadingFieldNumber = 13;
        private double velocityHeading_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VelocityHeading {
          get { if ((_hasBits0 & 4096) != 0) { return velocityHeading_; } else { return 0D; } }
          set {
            _hasBits0 |= 4096;
            velocityHeading_ = value;
          }
        }
        /// <summary>Gets whether the "velocity_heading" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVelocityHeading {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "velocity_heading" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVelocityHeading() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "velocity_bank" field.</summary>
        public const int VelocityBankFieldNumber = 14;
        private double velocityBank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double VelocityBank {
          get { if ((_hasBits0 & 8192) != 0) { return velocityBank_; } else { return 0D; } }
          set {
            _hasBits0 |= 8192;
            velocityBank_ = value;
          }
        }
        /// <summary>Gets whether the "velocity_bank" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVelocityBank {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "velocity_bank" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVelocityBank() {
          _hasBits0 &= ~8192;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserAircraftData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserAircraftData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AltitudeMsl, other.AltitudeMsl)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AltitudeAgl, other.AltitudeAgl)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundSpeed, other.GroundSpeed)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityLatitude, other.VelocityLatitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityAltitude, other.VelocityAltitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityLongitude, other.VelocityLongitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityPitch, other.VelocityPitch)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityHeading, other.VelocityHeading)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityBank, other.VelocityBank)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
          if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
          if (HasAltitudeMsl) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AltitudeMsl);
          if (HasAltitudeAgl) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AltitudeAgl);
          if (HasGroundSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundSpeed);
          if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
          if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
          if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
          if (HasVelocityLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityLatitude);
          if (HasVelocityAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityAltitude);
          if (HasVelocityLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityLongitude);
          if (HasVelocityPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityPitch);
          if (HasVelocityHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityHeading);
          if (HasVelocityBank) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityBank);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasLongitude) {
            output.WriteRawTag(9);
            output.WriteDouble(Longitude);
          }
          if (HasLatitude) {
            output.WriteRawTag(17);
            output.WriteDouble(Latitude);
          }
          if (HasAltitudeMsl) {
            output.WriteRawTag(25);
            output.WriteDouble(AltitudeMsl);
          }
          if (HasAltitudeAgl) {
            output.WriteRawTag(33);
            output.WriteDouble(AltitudeAgl);
          }
          if (HasGroundSpeed) {
            output.WriteRawTag(41);
            output.WriteDouble(GroundSpeed);
          }
          if (HasPitch) {
            output.WriteRawTag(49);
            output.WriteDouble(Pitch);
          }
          if (HasRoll) {
            output.WriteRawTag(57);
            output.WriteDouble(Roll);
          }
          if (HasYaw) {
            output.WriteRawTag(65);
            output.WriteDouble(Yaw);
          }
          if (HasVelocityLatitude) {
            output.WriteRawTag(73);
            output.WriteDouble(VelocityLatitude);
          }
          if (HasVelocityAltitude) {
            output.WriteRawTag(81);
            output.WriteDouble(VelocityAltitude);
          }
          if (HasVelocityLongitude) {
            output.WriteRawTag(89);
            output.WriteDouble(VelocityLongitude);
          }
          if (HasVelocityPitch) {
            output.WriteRawTag(97);
            output.WriteDouble(VelocityPitch);
          }
          if (HasVelocityHeading) {
            output.WriteRawTag(105);
            output.WriteDouble(VelocityHeading);
          }
          if (HasVelocityBank) {
            output.WriteRawTag(113);
            output.WriteDouble(VelocityBank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLongitude) {
            output.WriteRawTag(9);
            output.WriteDouble(Longitude);
          }
          if (HasLatitude) {
            output.WriteRawTag(17);
            output.WriteDouble(Latitude);
          }
          if (HasAltitudeMsl) {
            output.WriteRawTag(25);
            output.WriteDouble(AltitudeMsl);
          }
          if (HasAltitudeAgl) {
            output.WriteRawTag(33);
            output.WriteDouble(AltitudeAgl);
          }
          if (HasGroundSpeed) {
            output.WriteRawTag(41);
            output.WriteDouble(GroundSpeed);
          }
          if (HasPitch) {
            output.WriteRawTag(49);
            output.WriteDouble(Pitch);
          }
          if (HasRoll) {
            output.WriteRawTag(57);
            output.WriteDouble(Roll);
          }
          if (HasYaw) {
            output.WriteRawTag(65);
            output.WriteDouble(Yaw);
          }
          if (HasVelocityLatitude) {
            output.WriteRawTag(73);
            output.WriteDouble(VelocityLatitude);
          }
          if (HasVelocityAltitude) {
            output.WriteRawTag(81);
            output.WriteDouble(VelocityAltitude);
          }
          if (HasVelocityLongitude) {
            output.WriteRawTag(89);
            output.WriteDouble(VelocityLongitude);
          }
          if (HasVelocityPitch) {
            output.WriteRawTag(97);
            output.WriteDouble(VelocityPitch);
          }
          if (HasVelocityHeading) {
            output.WriteRawTag(105);
            output.WriteDouble(VelocityHeading);
          }
          if (HasVelocityBank) {
            output.WriteRawTag(113);
            output.WriteDouble(VelocityBank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasLongitude) {
            size += 1 + 8;
          }
          if (HasLatitude) {
            size += 1 + 8;
          }
          if (HasAltitudeMsl) {
            size += 1 + 8;
          }
          if (HasAltitudeAgl) {
            size += 1 + 8;
          }
          if (HasGroundSpeed) {
            size += 1 + 8;
          }
          if (HasPitch) {
            size += 1 + 8;
          }
          if (HasRoll) {
            size += 1 + 8;
          }
          if (HasYaw) {
            size += 1 + 8;
          }
          if (HasVelocityLatitude) {
            size += 1 + 8;
          }
          if (HasVelocityAltitude) {
            size += 1 + 8;
          }
          if (HasVelocityLongitude) {
            size += 1 + 8;
          }
          if (HasVelocityPitch) {
            size += 1 + 8;
          }
          if (HasVelocityHeading) {
            size += 1 + 8;
          }
          if (HasVelocityBank) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserAircraftData other) {
          if (other == null) {
            return;
          }
          if (other.HasLongitude) {
            Longitude = other.Longitude;
          }
          if (other.HasLatitude) {
            Latitude = other.Latitude;
          }
          if (other.HasAltitudeMsl) {
            AltitudeMsl = other.AltitudeMsl;
          }
          if (other.HasAltitudeAgl) {
            AltitudeAgl = other.AltitudeAgl;
          }
          if (other.HasGroundSpeed) {
            GroundSpeed = other.GroundSpeed;
          }
          if (other.HasPitch) {
            Pitch = other.Pitch;
          }
          if (other.HasRoll) {
            Roll = other.Roll;
          }
          if (other.HasYaw) {
            Yaw = other.Yaw;
          }
          if (other.HasVelocityLatitude) {
            VelocityLatitude = other.VelocityLatitude;
          }
          if (other.HasVelocityAltitude) {
            VelocityAltitude = other.VelocityAltitude;
          }
          if (other.HasVelocityLongitude) {
            VelocityLongitude = other.VelocityLongitude;
          }
          if (other.HasVelocityPitch) {
            VelocityPitch = other.VelocityPitch;
          }
          if (other.HasVelocityHeading) {
            VelocityHeading = other.VelocityHeading;
          }
          if (other.HasVelocityBank) {
            VelocityBank = other.VelocityBank;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Longitude = input.ReadDouble();
                break;
              }
              case 17: {
                Latitude = input.ReadDouble();
                break;
              }
              case 25: {
                AltitudeMsl = input.ReadDouble();
                break;
              }
              case 33: {
                AltitudeAgl = input.ReadDouble();
                break;
              }
              case 41: {
                GroundSpeed = input.ReadDouble();
                break;
              }
              case 49: {
                Pitch = input.ReadDouble();
                break;
              }
              case 57: {
                Roll = input.ReadDouble();
                break;
              }
              case 65: {
                Yaw = input.ReadDouble();
                break;
              }
              case 73: {
                VelocityLatitude = input.ReadDouble();
                break;
              }
              case 81: {
                VelocityAltitude = input.ReadDouble();
                break;
              }
              case 89: {
                VelocityLongitude = input.ReadDouble();
                break;
              }
              case 97: {
                VelocityPitch = input.ReadDouble();
                break;
              }
              case 105: {
                VelocityHeading = input.ReadDouble();
                break;
              }
              case 113: {
                VelocityBank = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Longitude = input.ReadDouble();
                break;
              }
              case 17: {
                Latitude = input.ReadDouble();
                break;
              }
              case 25: {
                AltitudeMsl = input.ReadDouble();
                break;
              }
              case 33: {
                AltitudeAgl = input.ReadDouble();
                break;
              }
              case 41: {
                GroundSpeed = input.ReadDouble();
                break;
              }
              case 49: {
                Pitch = input.ReadDouble();
                break;
              }
              case 57: {
                Roll = input.ReadDouble();
                break;
              }
              case 65: {
                Yaw = input.ReadDouble();
                break;
              }
              case 73: {
                VelocityLatitude = input.ReadDouble();
                break;
              }
              case 81: {
                VelocityAltitude = input.ReadDouble();
                break;
              }
              case 89: {
                VelocityLongitude = input.ReadDouble();
                break;
              }
              case 97: {
                VelocityPitch = input.ReadDouble();
                break;
              }
              case 105: {
                VelocityHeading = input.ReadDouble();
                break;
              }
              case 113: {
                VelocityBank = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class UserAircraftConfigData : pb::IMessage<UserAircraftConfigData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UserAircraftConfigData> _parser = new pb::MessageParser<UserAircraftConfigData>(() => new UserAircraftConfigData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserAircraftConfigData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vatsim.Xpilot.Protobuf.XplaneData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAircraftConfigData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAircraftConfigData(UserAircraftConfigData other) : this() {
          _hasBits0 = other._hasBits0;
          beaconLightsOn_ = other.beaconLightsOn_;
          landingLightsOn_ = other.landingLightsOn_;
          navLightsOn_ = other.navLightsOn_;
          strobeLightsOn_ = other.strobeLightsOn_;
          taxiLightsOn_ = other.taxiLightsOn_;
          flaps_ = other.flaps_;
          gearDown_ = other.gearDown_;
          speedBrakes_ = other.speedBrakes_;
          engineCount_ = other.engineCount_;
          engine1Running_ = other.engine1Running_;
          engine2Running_ = other.engine2Running_;
          engine3Running_ = other.engine3Running_;
          engine4Running_ = other.engine4Running_;
          onGround_ = other.onGround_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserAircraftConfigData Clone() {
          return new UserAircraftConfigData(this);
        }

        /// <summary>Field number for the "beacon_lights_on" field.</summary>
        public const int BeaconLightsOnFieldNumber = 1;
        private bool beaconLightsOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BeaconLightsOn {
          get { if ((_hasBits0 & 1) != 0) { return beaconLightsOn_; } else { return false; } }
          set {
            _hasBits0 |= 1;
            beaconLightsOn_ = value;
          }
        }
        /// <summary>Gets whether the "beacon_lights_on" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBeaconLightsOn {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "beacon_lights_on" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBeaconLightsOn() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "landing_lights_on" field.</summary>
        public const int LandingLightsOnFieldNumber = 2;
        private bool landingLightsOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LandingLightsOn {
          get { if ((_hasBits0 & 2) != 0) { return landingLightsOn_; } else { return false; } }
          set {
            _hasBits0 |= 2;
            landingLightsOn_ = value;
          }
        }
        /// <summary>Gets whether the "landing_lights_on" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLandingLightsOn {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "landing_lights_on" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLandingLightsOn() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "nav_lights_on" field.</summary>
        public const int NavLightsOnFieldNumber = 3;
        private bool navLightsOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NavLightsOn {
          get { if ((_hasBits0 & 4) != 0) { return navLightsOn_; } else { return false; } }
          set {
            _hasBits0 |= 4;
            navLightsOn_ = value;
          }
        }
        /// <summary>Gets whether the "nav_lights_on" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNavLightsOn {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "nav_lights_on" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNavLightsOn() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "strobe_lights_on" field.</summary>
        public const int StrobeLightsOnFieldNumber = 4;
        private bool strobeLightsOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool StrobeLightsOn {
          get { if ((_hasBits0 & 8) != 0) { return strobeLightsOn_; } else { return false; } }
          set {
            _hasBits0 |= 8;
            strobeLightsOn_ = value;
          }
        }
        /// <summary>Gets whether the "strobe_lights_on" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStrobeLightsOn {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "strobe_lights_on" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStrobeLightsOn() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "taxi_lights_on" field.</summary>
        public const int TaxiLightsOnFieldNumber = 5;
        private bool taxiLightsOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TaxiLightsOn {
          get { if ((_hasBits0 & 16) != 0) { return taxiLightsOn_; } else { return false; } }
          set {
            _hasBits0 |= 16;
            taxiLightsOn_ = value;
          }
        }
        /// <summary>Gets whether the "taxi_lights_on" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTaxiLightsOn {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "taxi_lights_on" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTaxiLightsOn() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "flaps" field.</summary>
        public const int FlapsFieldNumber = 6;
        private double flaps_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Flaps {
          get { if ((_hasBits0 & 32) != 0) { return flaps_; } else { return 0D; } }
          set {
            _hasBits0 |= 32;
            flaps_ = value;
          }
        }
        /// <summary>Gets whether the "flaps" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFlaps {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "flaps" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFlaps() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "gear_down" field.</summary>
        public const int GearDownFieldNumber = 7;
        private bool gearDown_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool GearDown {
          get { if ((_hasBits0 & 64) != 0) { return gearDown_; } else { return false; } }
          set {
            _hasBits0 |= 64;
            gearDown_ = value;
          }
        }
        /// <summary>Gets whether the "gear_down" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGearDown {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "gear_down" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGearDown() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "speed_brakes" field.</summary>
        public const int SpeedBrakesFieldNumber = 8;
        private double speedBrakes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double SpeedBrakes {
          get { if ((_hasBits0 & 128) != 0) { return speedBrakes_; } else { return 0D; } }
          set {
            _hasBits0 |= 128;
            speedBrakes_ = value;
          }
        }
        /// <summary>Gets whether the "speed_brakes" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSpeedBrakes {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "speed_brakes" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSpeedBrakes() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "engine_count" field.</summary>
        public const int EngineCountFieldNumber = 9;
        private int engineCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EngineCount {
          get { if ((_hasBits0 & 256) != 0) { return engineCount_; } else { return 0; } }
          set {
            _hasBits0 |= 256;
            engineCount_ = value;
          }
        }
        /// <summary>Gets whether the "engine_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEngineCount {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "engine_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEngineCount() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "engine1_running" field.</summary>
        public const int Engine1RunningFieldNumber = 10;
        private bool engine1Running_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Engine1Running {
          get { if ((_hasBits0 & 512) != 0) { return engine1Running_; } else { return false; } }
          set {
            _hasBits0 |= 512;
            engine1Running_ = value;
          }
        }
        /// <summary>Gets whether the "engine1_running" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEngine1Running {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "engine1_running" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEngine1Running() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "engine2_running" field.</summary>
        public const int Engine2RunningFieldNumber = 11;
        private bool engine2Running_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Engine2Running {
          get { if ((_hasBits0 & 1024) != 0) { return engine2Running_; } else { return false; } }
          set {
            _hasBits0 |= 1024;
            engine2Running_ = value;
          }
        }
        /// <summary>Gets whether the "engine2_running" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEngine2Running {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "engine2_running" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEngine2Running() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "engine3_running" field.</summary>
        public const int Engine3RunningFieldNumber = 12;
        private bool engine3Running_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Engine3Running {
          get { if ((_hasBits0 & 2048) != 0) { return engine3Running_; } else { return false; } }
          set {
            _hasBits0 |= 2048;
            engine3Running_ = value;
          }
        }
        /// <summary>Gets whether the "engine3_running" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEngine3Running {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "engine3_running" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEngine3Running() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "engine4_running" field.</summary>
        public const int Engine4RunningFieldNumber = 13;
        private bool engine4Running_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Engine4Running {
          get { if ((_hasBits0 & 4096) != 0) { return engine4Running_; } else { return false; } }
          set {
            _hasBits0 |= 4096;
            engine4Running_ = value;
          }
        }
        /// <summary>Gets whether the "engine4_running" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEngine4Running {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "engine4_running" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEngine4Running() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "on_ground" field.</summary>
        public const int OnGroundFieldNumber = 14;
        private bool onGround_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool OnGround {
          get { if ((_hasBits0 & 8192) != 0) { return onGround_; } else { return false; } }
          set {
            _hasBits0 |= 8192;
            onGround_ = value;
          }
        }
        /// <summary>Gets whether the "on_ground" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOnGround {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "on_ground" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOnGround() {
          _hasBits0 &= ~8192;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserAircraftConfigData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserAircraftConfigData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BeaconLightsOn != other.BeaconLightsOn) return false;
          if (LandingLightsOn != other.LandingLightsOn) return false;
          if (NavLightsOn != other.NavLightsOn) return false;
          if (StrobeLightsOn != other.StrobeLightsOn) return false;
          if (TaxiLightsOn != other.TaxiLightsOn) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Flaps, other.Flaps)) return false;
          if (GearDown != other.GearDown) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedBrakes, other.SpeedBrakes)) return false;
          if (EngineCount != other.EngineCount) return false;
          if (Engine1Running != other.Engine1Running) return false;
          if (Engine2Running != other.Engine2Running) return false;
          if (Engine3Running != other.Engine3Running) return false;
          if (Engine4Running != other.Engine4Running) return false;
          if (OnGround != other.OnGround) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasBeaconLightsOn) hash ^= BeaconLightsOn.GetHashCode();
          if (HasLandingLightsOn) hash ^= LandingLightsOn.GetHashCode();
          if (HasNavLightsOn) hash ^= NavLightsOn.GetHashCode();
          if (HasStrobeLightsOn) hash ^= StrobeLightsOn.GetHashCode();
          if (HasTaxiLightsOn) hash ^= TaxiLightsOn.GetHashCode();
          if (HasFlaps) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Flaps);
          if (HasGearDown) hash ^= GearDown.GetHashCode();
          if (HasSpeedBrakes) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedBrakes);
          if (HasEngineCount) hash ^= EngineCount.GetHashCode();
          if (HasEngine1Running) hash ^= Engine1Running.GetHashCode();
          if (HasEngine2Running) hash ^= Engine2Running.GetHashCode();
          if (HasEngine3Running) hash ^= Engine3Running.GetHashCode();
          if (HasEngine4Running) hash ^= Engine4Running.GetHashCode();
          if (HasOnGround) hash ^= OnGround.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasBeaconLightsOn) {
            output.WriteRawTag(8);
            output.WriteBool(BeaconLightsOn);
          }
          if (HasLandingLightsOn) {
            output.WriteRawTag(16);
            output.WriteBool(LandingLightsOn);
          }
          if (HasNavLightsOn) {
            output.WriteRawTag(24);
            output.WriteBool(NavLightsOn);
          }
          if (HasStrobeLightsOn) {
            output.WriteRawTag(32);
            output.WriteBool(StrobeLightsOn);
          }
          if (HasTaxiLightsOn) {
            output.WriteRawTag(40);
            output.WriteBool(TaxiLightsOn);
          }
          if (HasFlaps) {
            output.WriteRawTag(49);
            output.WriteDouble(Flaps);
          }
          if (HasGearDown) {
            output.WriteRawTag(56);
            output.WriteBool(GearDown);
          }
          if (HasSpeedBrakes) {
            output.WriteRawTag(65);
            output.WriteDouble(SpeedBrakes);
          }
          if (HasEngineCount) {
            output.WriteRawTag(72);
            output.WriteInt32(EngineCount);
          }
          if (HasEngine1Running) {
            output.WriteRawTag(80);
            output.WriteBool(Engine1Running);
          }
          if (HasEngine2Running) {
            output.WriteRawTag(88);
            output.WriteBool(Engine2Running);
          }
          if (HasEngine3Running) {
            output.WriteRawTag(96);
            output.WriteBool(Engine3Running);
          }
          if (HasEngine4Running) {
            output.WriteRawTag(104);
            output.WriteBool(Engine4Running);
          }
          if (HasOnGround) {
            output.WriteRawTag(112);
            output.WriteBool(OnGround);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasBeaconLightsOn) {
            output.WriteRawTag(8);
            output.WriteBool(BeaconLightsOn);
          }
          if (HasLandingLightsOn) {
            output.WriteRawTag(16);
            output.WriteBool(LandingLightsOn);
          }
          if (HasNavLightsOn) {
            output.WriteRawTag(24);
            output.WriteBool(NavLightsOn);
          }
          if (HasStrobeLightsOn) {
            output.WriteRawTag(32);
            output.WriteBool(StrobeLightsOn);
          }
          if (HasTaxiLightsOn) {
            output.WriteRawTag(40);
            output.WriteBool(TaxiLightsOn);
          }
          if (HasFlaps) {
            output.WriteRawTag(49);
            output.WriteDouble(Flaps);
          }
          if (HasGearDown) {
            output.WriteRawTag(56);
            output.WriteBool(GearDown);
          }
          if (HasSpeedBrakes) {
            output.WriteRawTag(65);
            output.WriteDouble(SpeedBrakes);
          }
          if (HasEngineCount) {
            output.WriteRawTag(72);
            output.WriteInt32(EngineCount);
          }
          if (HasEngine1Running) {
            output.WriteRawTag(80);
            output.WriteBool(Engine1Running);
          }
          if (HasEngine2Running) {
            output.WriteRawTag(88);
            output.WriteBool(Engine2Running);
          }
          if (HasEngine3Running) {
            output.WriteRawTag(96);
            output.WriteBool(Engine3Running);
          }
          if (HasEngine4Running) {
            output.WriteRawTag(104);
            output.WriteBool(Engine4Running);
          }
          if (HasOnGround) {
            output.WriteRawTag(112);
            output.WriteBool(OnGround);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasBeaconLightsOn) {
            size += 1 + 1;
          }
          if (HasLandingLightsOn) {
            size += 1 + 1;
          }
          if (HasNavLightsOn) {
            size += 1 + 1;
          }
          if (HasStrobeLightsOn) {
            size += 1 + 1;
          }
          if (HasTaxiLightsOn) {
            size += 1 + 1;
          }
          if (HasFlaps) {
            size += 1 + 8;
          }
          if (HasGearDown) {
            size += 1 + 1;
          }
          if (HasSpeedBrakes) {
            size += 1 + 8;
          }
          if (HasEngineCount) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EngineCount);
          }
          if (HasEngine1Running) {
            size += 1 + 1;
          }
          if (HasEngine2Running) {
            size += 1 + 1;
          }
          if (HasEngine3Running) {
            size += 1 + 1;
          }
          if (HasEngine4Running) {
            size += 1 + 1;
          }
          if (HasOnGround) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserAircraftConfigData other) {
          if (other == null) {
            return;
          }
          if (other.HasBeaconLightsOn) {
            BeaconLightsOn = other.BeaconLightsOn;
          }
          if (other.HasLandingLightsOn) {
            LandingLightsOn = other.LandingLightsOn;
          }
          if (other.HasNavLightsOn) {
            NavLightsOn = other.NavLightsOn;
          }
          if (other.HasStrobeLightsOn) {
            StrobeLightsOn = other.StrobeLightsOn;
          }
          if (other.HasTaxiLightsOn) {
            TaxiLightsOn = other.TaxiLightsOn;
          }
          if (other.HasFlaps) {
            Flaps = other.Flaps;
          }
          if (other.HasGearDown) {
            GearDown = other.GearDown;
          }
          if (other.HasSpeedBrakes) {
            SpeedBrakes = other.SpeedBrakes;
          }
          if (other.HasEngineCount) {
            EngineCount = other.EngineCount;
          }
          if (other.HasEngine1Running) {
            Engine1Running = other.Engine1Running;
          }
          if (other.HasEngine2Running) {
            Engine2Running = other.Engine2Running;
          }
          if (other.HasEngine3Running) {
            Engine3Running = other.Engine3Running;
          }
          if (other.HasEngine4Running) {
            Engine4Running = other.Engine4Running;
          }
          if (other.HasOnGround) {
            OnGround = other.OnGround;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                BeaconLightsOn = input.ReadBool();
                break;
              }
              case 16: {
                LandingLightsOn = input.ReadBool();
                break;
              }
              case 24: {
                NavLightsOn = input.ReadBool();
                break;
              }
              case 32: {
                StrobeLightsOn = input.ReadBool();
                break;
              }
              case 40: {
                TaxiLightsOn = input.ReadBool();
                break;
              }
              case 49: {
                Flaps = input.ReadDouble();
                break;
              }
              case 56: {
                GearDown = input.ReadBool();
                break;
              }
              case 65: {
                SpeedBrakes = input.ReadDouble();
                break;
              }
              case 72: {
                EngineCount = input.ReadInt32();
                break;
              }
              case 80: {
                Engine1Running = input.ReadBool();
                break;
              }
              case 88: {
                Engine2Running = input.ReadBool();
                break;
              }
              case 96: {
                Engine3Running = input.ReadBool();
                break;
              }
              case 104: {
                Engine4Running = input.ReadBool();
                break;
              }
              case 112: {
                OnGround = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                BeaconLightsOn = input.ReadBool();
                break;
              }
              case 16: {
                LandingLightsOn = input.ReadBool();
                break;
              }
              case 24: {
                NavLightsOn = input.ReadBool();
                break;
              }
              case 32: {
                StrobeLightsOn = input.ReadBool();
                break;
              }
              case 40: {
                TaxiLightsOn = input.ReadBool();
                break;
              }
              case 49: {
                Flaps = input.ReadDouble();
                break;
              }
              case 56: {
                GearDown = input.ReadBool();
                break;
              }
              case 65: {
                SpeedBrakes = input.ReadDouble();
                break;
              }
              case 72: {
                EngineCount = input.ReadInt32();
                break;
              }
              case 80: {
                Engine1Running = input.ReadBool();
                break;
              }
              case 88: {
                Engine2Running = input.ReadBool();
                break;
              }
              case 96: {
                Engine3Running = input.ReadBool();
                break;
              }
              case 104: {
                Engine4Running = input.ReadBool();
                break;
              }
              case 112: {
                OnGround = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class RadioStack : pb::IMessage<RadioStack>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RadioStack> _parser = new pb::MessageParser<RadioStack>(() => new RadioStack());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RadioStack> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Vatsim.Xpilot.Protobuf.XplaneData.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RadioStack() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RadioStack(RadioStack other) : this() {
          _hasBits0 = other._hasBits0;
          audioComSelection_ = other.audioComSelection_;
          com1Power_ = other.com1Power_;
          com1Freq_ = other.com1Freq_;
          com1AudioSelection_ = other.com1AudioSelection_;
          com1Volume_ = other.com1Volume_;
          com2Power_ = other.com2Power_;
          com2Freq_ = other.com2Freq_;
          com2AudioSelection_ = other.com2AudioSelection_;
          com2Volume_ = other.com2Volume_;
          avionicsPowerOn_ = other.avionicsPowerOn_;
          transponderCode_ = other.transponderCode_;
          transponderMode_ = other.transponderMode_;
          transponderIdent_ = other.transponderIdent_;
          pttPressed_ = other.pttPressed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RadioStack Clone() {
          return new RadioStack(this);
        }

        /// <summary>Field number for the "audio_com_selection" field.</summary>
        public const int AudioComSelectionFieldNumber = 1;
        private int audioComSelection_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AudioComSelection {
          get { if ((_hasBits0 & 1) != 0) { return audioComSelection_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            audioComSelection_ = value;
          }
        }
        /// <summary>Gets whether the "audio_com_selection" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAudioComSelection {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "audio_com_selection" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAudioComSelection() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "com1_power" field.</summary>
        public const int Com1PowerFieldNumber = 2;
        private bool com1Power_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Com1Power {
          get { if ((_hasBits0 & 2) != 0) { return com1Power_; } else { return false; } }
          set {
            _hasBits0 |= 2;
            com1Power_ = value;
          }
        }
        /// <summary>Gets whether the "com1_power" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom1Power {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "com1_power" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom1Power() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "com1_freq" field.</summary>
        public const int Com1FreqFieldNumber = 3;
        private int com1Freq_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Com1Freq {
          get { if ((_hasBits0 & 4) != 0) { return com1Freq_; } else { return 0; } }
          set {
            _hasBits0 |= 4;
            com1Freq_ = value;
          }
        }
        /// <summary>Gets whether the "com1_freq" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom1Freq {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "com1_freq" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom1Freq() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "com1_audio_selection" field.</summary>
        public const int Com1AudioSelectionFieldNumber = 4;
        private bool com1AudioSelection_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Com1AudioSelection {
          get { if ((_hasBits0 & 8) != 0) { return com1AudioSelection_; } else { return false; } }
          set {
            _hasBits0 |= 8;
            com1AudioSelection_ = value;
          }
        }
        /// <summary>Gets whether the "com1_audio_selection" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom1AudioSelection {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "com1_audio_selection" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom1AudioSelection() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "com1_volume" field.</summary>
        public const int Com1VolumeFieldNumber = 5;
        private float com1Volume_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Com1Volume {
          get { if ((_hasBits0 & 16) != 0) { return com1Volume_; } else { return 0F; } }
          set {
            _hasBits0 |= 16;
            com1Volume_ = value;
          }
        }
        /// <summary>Gets whether the "com1_volume" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom1Volume {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "com1_volume" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom1Volume() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "com2_power" field.</summary>
        public const int Com2PowerFieldNumber = 6;
        private bool com2Power_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Com2Power {
          get { if ((_hasBits0 & 32) != 0) { return com2Power_; } else { return false; } }
          set {
            _hasBits0 |= 32;
            com2Power_ = value;
          }
        }
        /// <summary>Gets whether the "com2_power" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom2Power {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "com2_power" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom2Power() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "com2_freq" field.</summary>
        public const int Com2FreqFieldNumber = 7;
        private int com2Freq_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Com2Freq {
          get { if ((_hasBits0 & 64) != 0) { return com2Freq_; } else { return 0; } }
          set {
            _hasBits0 |= 64;
            com2Freq_ = value;
          }
        }
        /// <summary>Gets whether the "com2_freq" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom2Freq {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "com2_freq" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom2Freq() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "com2_audio_selection" field.</summary>
        public const int Com2AudioSelectionFieldNumber = 8;
        private bool com2AudioSelection_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Com2AudioSelection {
          get { if ((_hasBits0 & 128) != 0) { return com2AudioSelection_; } else { return false; } }
          set {
            _hasBits0 |= 128;
            com2AudioSelection_ = value;
          }
        }
        /// <summary>Gets whether the "com2_audio_selection" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom2AudioSelection {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "com2_audio_selection" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom2AudioSelection() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "com2_volume" field.</summary>
        public const int Com2VolumeFieldNumber = 9;
        private float com2Volume_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Com2Volume {
          get { if ((_hasBits0 & 256) != 0) { return com2Volume_; } else { return 0F; } }
          set {
            _hasBits0 |= 256;
            com2Volume_ = value;
          }
        }
        /// <summary>Gets whether the "com2_volume" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCom2Volume {
          get { return (_hasBits0 & 256) != 0; }
        }
        /// <summary>Clears the value of the "com2_volume" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCom2Volume() {
          _hasBits0 &= ~256;
        }

        /// <summary>Field number for the "avionics_power_on" field.</summary>
        public const int AvionicsPowerOnFieldNumber = 10;
        private bool avionicsPowerOn_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AvionicsPowerOn {
          get { if ((_hasBits0 & 512) != 0) { return avionicsPowerOn_; } else { return false; } }
          set {
            _hasBits0 |= 512;
            avionicsPowerOn_ = value;
          }
        }
        /// <summary>Gets whether the "avionics_power_on" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAvionicsPowerOn {
          get { return (_hasBits0 & 512) != 0; }
        }
        /// <summary>Clears the value of the "avionics_power_on" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAvionicsPowerOn() {
          _hasBits0 &= ~512;
        }

        /// <summary>Field number for the "transponder_code" field.</summary>
        public const int TransponderCodeFieldNumber = 11;
        private int transponderCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TransponderCode {
          get { if ((_hasBits0 & 1024) != 0) { return transponderCode_; } else { return 0; } }
          set {
            _hasBits0 |= 1024;
            transponderCode_ = value;
          }
        }
        /// <summary>Gets whether the "transponder_code" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTransponderCode {
          get { return (_hasBits0 & 1024) != 0; }
        }
        /// <summary>Clears the value of the "transponder_code" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTransponderCode() {
          _hasBits0 &= ~1024;
        }

        /// <summary>Field number for the "transponder_mode" field.</summary>
        public const int TransponderModeFieldNumber = 12;
        private int transponderMode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TransponderMode {
          get { if ((_hasBits0 & 2048) != 0) { return transponderMode_; } else { return 0; } }
          set {
            _hasBits0 |= 2048;
            transponderMode_ = value;
          }
        }
        /// <summary>Gets whether the "transponder_mode" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTransponderMode {
          get { return (_hasBits0 & 2048) != 0; }
        }
        /// <summary>Clears the value of the "transponder_mode" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTransponderMode() {
          _hasBits0 &= ~2048;
        }

        /// <summary>Field number for the "transponder_ident" field.</summary>
        public const int TransponderIdentFieldNumber = 13;
        private bool transponderIdent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TransponderIdent {
          get { if ((_hasBits0 & 4096) != 0) { return transponderIdent_; } else { return false; } }
          set {
            _hasBits0 |= 4096;
            transponderIdent_ = value;
          }
        }
        /// <summary>Gets whether the "transponder_ident" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTransponderIdent {
          get { return (_hasBits0 & 4096) != 0; }
        }
        /// <summary>Clears the value of the "transponder_ident" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTransponderIdent() {
          _hasBits0 &= ~4096;
        }

        /// <summary>Field number for the "ptt_pressed" field.</summary>
        public const int PttPressedFieldNumber = 14;
        private bool pttPressed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool PttPressed {
          get { if ((_hasBits0 & 8192) != 0) { return pttPressed_; } else { return false; } }
          set {
            _hasBits0 |= 8192;
            pttPressed_ = value;
          }
        }
        /// <summary>Gets whether the "ptt_pressed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPttPressed {
          get { return (_hasBits0 & 8192) != 0; }
        }
        /// <summary>Clears the value of the "ptt_pressed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPttPressed() {
          _hasBits0 &= ~8192;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RadioStack);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RadioStack other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AudioComSelection != other.AudioComSelection) return false;
          if (Com1Power != other.Com1Power) return false;
          if (Com1Freq != other.Com1Freq) return false;
          if (Com1AudioSelection != other.Com1AudioSelection) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Com1Volume, other.Com1Volume)) return false;
          if (Com2Power != other.Com2Power) return false;
          if (Com2Freq != other.Com2Freq) return false;
          if (Com2AudioSelection != other.Com2AudioSelection) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Com2Volume, other.Com2Volume)) return false;
          if (AvionicsPowerOn != other.AvionicsPowerOn) return false;
          if (TransponderCode != other.TransponderCode) return false;
          if (TransponderMode != other.TransponderMode) return false;
          if (TransponderIdent != other.TransponderIdent) return false;
          if (PttPressed != other.PttPressed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasAudioComSelection) hash ^= AudioComSelection.GetHashCode();
          if (HasCom1Power) hash ^= Com1Power.GetHashCode();
          if (HasCom1Freq) hash ^= Com1Freq.GetHashCode();
          if (HasCom1AudioSelection) hash ^= Com1AudioSelection.GetHashCode();
          if (HasCom1Volume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Com1Volume);
          if (HasCom2Power) hash ^= Com2Power.GetHashCode();
          if (HasCom2Freq) hash ^= Com2Freq.GetHashCode();
          if (HasCom2AudioSelection) hash ^= Com2AudioSelection.GetHashCode();
          if (HasCom2Volume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Com2Volume);
          if (HasAvionicsPowerOn) hash ^= AvionicsPowerOn.GetHashCode();
          if (HasTransponderCode) hash ^= TransponderCode.GetHashCode();
          if (HasTransponderMode) hash ^= TransponderMode.GetHashCode();
          if (HasTransponderIdent) hash ^= TransponderIdent.GetHashCode();
          if (HasPttPressed) hash ^= PttPressed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasAudioComSelection) {
            output.WriteRawTag(8);
            output.WriteInt32(AudioComSelection);
          }
          if (HasCom1Power) {
            output.WriteRawTag(16);
            output.WriteBool(Com1Power);
          }
          if (HasCom1Freq) {
            output.WriteRawTag(24);
            output.WriteInt32(Com1Freq);
          }
          if (HasCom1AudioSelection) {
            output.WriteRawTag(32);
            output.WriteBool(Com1AudioSelection);
          }
          if (HasCom1Volume) {
            output.WriteRawTag(45);
            output.WriteFloat(Com1Volume);
          }
          if (HasCom2Power) {
            output.WriteRawTag(48);
            output.WriteBool(Com2Power);
          }
          if (HasCom2Freq) {
            output.WriteRawTag(56);
            output.WriteInt32(Com2Freq);
          }
          if (HasCom2AudioSelection) {
            output.WriteRawTag(64);
            output.WriteBool(Com2AudioSelection);
          }
          if (HasCom2Volume) {
            output.WriteRawTag(77);
            output.WriteFloat(Com2Volume);
          }
          if (HasAvionicsPowerOn) {
            output.WriteRawTag(80);
            output.WriteBool(AvionicsPowerOn);
          }
          if (HasTransponderCode) {
            output.WriteRawTag(88);
            output.WriteInt32(TransponderCode);
          }
          if (HasTransponderMode) {
            output.WriteRawTag(96);
            output.WriteInt32(TransponderMode);
          }
          if (HasTransponderIdent) {
            output.WriteRawTag(104);
            output.WriteBool(TransponderIdent);
          }
          if (HasPttPressed) {
            output.WriteRawTag(112);
            output.WriteBool(PttPressed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasAudioComSelection) {
            output.WriteRawTag(8);
            output.WriteInt32(AudioComSelection);
          }
          if (HasCom1Power) {
            output.WriteRawTag(16);
            output.WriteBool(Com1Power);
          }
          if (HasCom1Freq) {
            output.WriteRawTag(24);
            output.WriteInt32(Com1Freq);
          }
          if (HasCom1AudioSelection) {
            output.WriteRawTag(32);
            output.WriteBool(Com1AudioSelection);
          }
          if (HasCom1Volume) {
            output.WriteRawTag(45);
            output.WriteFloat(Com1Volume);
          }
          if (HasCom2Power) {
            output.WriteRawTag(48);
            output.WriteBool(Com2Power);
          }
          if (HasCom2Freq) {
            output.WriteRawTag(56);
            output.WriteInt32(Com2Freq);
          }
          if (HasCom2AudioSelection) {
            output.WriteRawTag(64);
            output.WriteBool(Com2AudioSelection);
          }
          if (HasCom2Volume) {
            output.WriteRawTag(77);
            output.WriteFloat(Com2Volume);
          }
          if (HasAvionicsPowerOn) {
            output.WriteRawTag(80);
            output.WriteBool(AvionicsPowerOn);
          }
          if (HasTransponderCode) {
            output.WriteRawTag(88);
            output.WriteInt32(TransponderCode);
          }
          if (HasTransponderMode) {
            output.WriteRawTag(96);
            output.WriteInt32(TransponderMode);
          }
          if (HasTransponderIdent) {
            output.WriteRawTag(104);
            output.WriteBool(TransponderIdent);
          }
          if (HasPttPressed) {
            output.WriteRawTag(112);
            output.WriteBool(PttPressed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasAudioComSelection) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioComSelection);
          }
          if (HasCom1Power) {
            size += 1 + 1;
          }
          if (HasCom1Freq) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com1Freq);
          }
          if (HasCom1AudioSelection) {
            size += 1 + 1;
          }
          if (HasCom1Volume) {
            size += 1 + 4;
          }
          if (HasCom2Power) {
            size += 1 + 1;
          }
          if (HasCom2Freq) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com2Freq);
          }
          if (HasCom2AudioSelection) {
            size += 1 + 1;
          }
          if (HasCom2Volume) {
            size += 1 + 4;
          }
          if (HasAvionicsPowerOn) {
            size += 1 + 1;
          }
          if (HasTransponderCode) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransponderCode);
          }
          if (HasTransponderMode) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransponderMode);
          }
          if (HasTransponderIdent) {
            size += 1 + 1;
          }
          if (HasPttPressed) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RadioStack other) {
          if (other == null) {
            return;
          }
          if (other.HasAudioComSelection) {
            AudioComSelection = other.AudioComSelection;
          }
          if (other.HasCom1Power) {
            Com1Power = other.Com1Power;
          }
          if (other.HasCom1Freq) {
            Com1Freq = other.Com1Freq;
          }
          if (other.HasCom1AudioSelection) {
            Com1AudioSelection = other.Com1AudioSelection;
          }
          if (other.HasCom1Volume) {
            Com1Volume = other.Com1Volume;
          }
          if (other.HasCom2Power) {
            Com2Power = other.Com2Power;
          }
          if (other.HasCom2Freq) {
            Com2Freq = other.Com2Freq;
          }
          if (other.HasCom2AudioSelection) {
            Com2AudioSelection = other.Com2AudioSelection;
          }
          if (other.HasCom2Volume) {
            Com2Volume = other.Com2Volume;
          }
          if (other.HasAvionicsPowerOn) {
            AvionicsPowerOn = other.AvionicsPowerOn;
          }
          if (other.HasTransponderCode) {
            TransponderCode = other.TransponderCode;
          }
          if (other.HasTransponderMode) {
            TransponderMode = other.TransponderMode;
          }
          if (other.HasTransponderIdent) {
            TransponderIdent = other.TransponderIdent;
          }
          if (other.HasPttPressed) {
            PttPressed = other.PttPressed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AudioComSelection = input.ReadInt32();
                break;
              }
              case 16: {
                Com1Power = input.ReadBool();
                break;
              }
              case 24: {
                Com1Freq = input.ReadInt32();
                break;
              }
              case 32: {
                Com1AudioSelection = input.ReadBool();
                break;
              }
              case 45: {
                Com1Volume = input.ReadFloat();
                break;
              }
              case 48: {
                Com2Power = input.ReadBool();
                break;
              }
              case 56: {
                Com2Freq = input.ReadInt32();
                break;
              }
              case 64: {
                Com2AudioSelection = input.ReadBool();
                break;
              }
              case 77: {
                Com2Volume = input.ReadFloat();
                break;
              }
              case 80: {
                AvionicsPowerOn = input.ReadBool();
                break;
              }
              case 88: {
                TransponderCode = input.ReadInt32();
                break;
              }
              case 96: {
                TransponderMode = input.ReadInt32();
                break;
              }
              case 104: {
                TransponderIdent = input.ReadBool();
                break;
              }
              case 112: {
                PttPressed = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                AudioComSelection = input.ReadInt32();
                break;
              }
              case 16: {
                Com1Power = input.ReadBool();
                break;
              }
              case 24: {
                Com1Freq = input.ReadInt32();
                break;
              }
              case 32: {
                Com1AudioSelection = input.ReadBool();
                break;
              }
              case 45: {
                Com1Volume = input.ReadFloat();
                break;
              }
              case 48: {
                Com2Power = input.ReadBool();
                break;
              }
              case 56: {
                Com2Freq = input.ReadInt32();
                break;
              }
              case 64: {
                Com2AudioSelection = input.ReadBool();
                break;
              }
              case 77: {
                Com2Volume = input.ReadFloat();
                break;
              }
              case 80: {
                AvionicsPowerOn = input.ReadBool();
                break;
              }
              case 88: {
                TransponderCode = input.ReadInt32();
                break;
              }
              case 96: {
                TransponderMode = input.ReadInt32();
                break;
              }
              case 104: {
                TransponderIdent = input.ReadBool();
                break;
              }
              case 112: {
                PttPressed = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
