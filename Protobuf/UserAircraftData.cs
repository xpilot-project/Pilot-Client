/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UserAircraftData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from UserAircraftData.proto</summary>
  public static partial class UserAircraftDataReflection {

    #region Descriptor
    /// <summary>File descriptor for UserAircraftData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserAircraftDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZVc2VyQWlyY3JhZnREYXRhLnByb3RvEgZ4cGlsb3Qi7AQKEFVzZXJBaXJj",
            "cmFmdERhdGESFgoJbG9uZ2l0dWRlGAEgASgBSACIAQESFQoIbGF0aXR1ZGUY",
            "AiABKAFIAYgBARIVCghhbHRpdHVkZRgDIAEoAUgCiAEBEh4KEXByZXNzdXJl",
            "X2FsdGl0dWRlGAQgASgBSAOIAQESGQoMZ3JvdW5kX3NwZWVkGAUgASgBSASI",
            "AQESEgoFcGl0Y2gYBiABKAFIBYgBARIRCgRyb2xsGAcgASgBSAaIAQESEAoD",
            "eWF3GAggASgBSAeIAQESHgoRdmVsb2NpdHlfbGF0aXR1ZGUYCSABKAFICIgB",
            "ARIeChF2ZWxvY2l0eV9hbHRpdHVkZRgKIAEoAUgJiAEBEh8KEnZlbG9jaXR5",
            "X2xvbmdpdHVkZRgLIAEoAUgKiAEBEhsKDnZlbG9jaXR5X3BpdGNoGAwgASgB",
            "SAuIAQESHQoQdmVsb2NpdHlfaGVhZGluZxgNIAEoAUgMiAEBEhoKDXZlbG9j",
            "aXR5X2JhbmsYDiABKAFIDYgBAUIMCgpfbG9uZ2l0dWRlQgsKCV9sYXRpdHVk",
            "ZUILCglfYWx0aXR1ZGVCFAoSX3ByZXNzdXJlX2FsdGl0dWRlQg8KDV9ncm91",
            "bmRfc3BlZWRCCAoGX3BpdGNoQgcKBV9yb2xsQgYKBF95YXdCFAoSX3ZlbG9j",
            "aXR5X2xhdGl0dWRlQhQKEl92ZWxvY2l0eV9hbHRpdHVkZUIVChNfdmVsb2Np",
            "dHlfbG9uZ2l0dWRlQhEKD192ZWxvY2l0eV9waXRjaEITChFfdmVsb2NpdHlf",
            "aGVhZGluZ0IQCg5fdmVsb2NpdHlfYmFua0IZqgIWVmF0c2ltLlhwaWxvdC5Q",
            "cm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.UserAircraftData), global::Vatsim.Xpilot.Protobuf.UserAircraftData.Parser, new[]{ "Longitude", "Latitude", "Altitude", "PressureAltitude", "GroundSpeed", "Pitch", "Roll", "Yaw", "VelocityLatitude", "VelocityAltitude", "VelocityLongitude", "VelocityPitch", "VelocityHeading", "VelocityBank" }, new[]{ "Longitude", "Latitude", "Altitude", "PressureAltitude", "GroundSpeed", "Pitch", "Roll", "Yaw", "VelocityLatitude", "VelocityAltitude", "VelocityLongitude", "VelocityPitch", "VelocityHeading", "VelocityBank" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserAircraftData : pb::IMessage<UserAircraftData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserAircraftData> _parser = new pb::MessageParser<UserAircraftData>(() => new UserAircraftData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAircraftData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.UserAircraftDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAircraftData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAircraftData(UserAircraftData other) : this() {
      _hasBits0 = other._hasBits0;
      longitude_ = other.longitude_;
      latitude_ = other.latitude_;
      altitude_ = other.altitude_;
      pressureAltitude_ = other.pressureAltitude_;
      groundSpeed_ = other.groundSpeed_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      yaw_ = other.yaw_;
      velocityLatitude_ = other.velocityLatitude_;
      velocityAltitude_ = other.velocityAltitude_;
      velocityLongitude_ = other.velocityLongitude_;
      velocityPitch_ = other.velocityPitch_;
      velocityHeading_ = other.velocityHeading_;
      velocityBank_ = other.velocityBank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAircraftData Clone() {
      return new UserAircraftData(this);
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 1;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { if ((_hasBits0 & 1) != 0) { return longitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 1;
        longitude_ = value;
      }
    }
    /// <summary>Gets whether the "longitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongitude {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "longitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongitude() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { if ((_hasBits0 & 2) != 0) { return latitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        latitude_ = value;
      }
    }
    /// <summary>Gets whether the "latitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLatitude {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "latitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLatitude() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 3;
    private double altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { if ((_hasBits0 & 4) != 0) { return altitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        altitude_ = value;
      }
    }
    /// <summary>Gets whether the "altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAltitude {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAltitude() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "pressure_altitude" field.</summary>
    public const int PressureAltitudeFieldNumber = 4;
    private double pressureAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PressureAltitude {
      get { if ((_hasBits0 & 8) != 0) { return pressureAltitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 8;
        pressureAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "pressure_altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPressureAltitude {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pressure_altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPressureAltitude() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ground_speed" field.</summary>
    public const int GroundSpeedFieldNumber = 5;
    private double groundSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundSpeed {
      get { if ((_hasBits0 & 16) != 0) { return groundSpeed_; } else { return 0D; } }
      set {
        _hasBits0 |= 16;
        groundSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "ground_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroundSpeed {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "ground_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroundSpeed() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 6;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { if ((_hasBits0 & 32) != 0) { return pitch_; } else { return 0D; } }
      set {
        _hasBits0 |= 32;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPitch {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPitch() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 7;
    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roll {
      get { if ((_hasBits0 & 64) != 0) { return roll_; } else { return 0D; } }
      set {
        _hasBits0 |= 64;
        roll_ = value;
      }
    }
    /// <summary>Gets whether the "roll" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoll {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "roll" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoll() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 8;
    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yaw {
      get { if ((_hasBits0 & 128) != 0) { return yaw_; } else { return 0D; } }
      set {
        _hasBits0 |= 128;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYaw {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYaw() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "velocity_latitude" field.</summary>
    public const int VelocityLatitudeFieldNumber = 9;
    private double velocityLatitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityLatitude {
      get { if ((_hasBits0 & 256) != 0) { return velocityLatitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 256;
        velocityLatitude_ = value;
      }
    }
    /// <summary>Gets whether the "velocity_latitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVelocityLatitude {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "velocity_latitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVelocityLatitude() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "velocity_altitude" field.</summary>
    public const int VelocityAltitudeFieldNumber = 10;
    private double velocityAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityAltitude {
      get { if ((_hasBits0 & 512) != 0) { return velocityAltitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 512;
        velocityAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "velocity_altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVelocityAltitude {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "velocity_altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVelocityAltitude() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "velocity_longitude" field.</summary>
    public const int VelocityLongitudeFieldNumber = 11;
    private double velocityLongitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityLongitude {
      get { if ((_hasBits0 & 1024) != 0) { return velocityLongitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 1024;
        velocityLongitude_ = value;
      }
    }
    /// <summary>Gets whether the "velocity_longitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVelocityLongitude {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "velocity_longitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVelocityLongitude() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "velocity_pitch" field.</summary>
    public const int VelocityPitchFieldNumber = 12;
    private double velocityPitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityPitch {
      get { if ((_hasBits0 & 2048) != 0) { return velocityPitch_; } else { return 0D; } }
      set {
        _hasBits0 |= 2048;
        velocityPitch_ = value;
      }
    }
    /// <summary>Gets whether the "velocity_pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVelocityPitch {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "velocity_pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVelocityPitch() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "velocity_heading" field.</summary>
    public const int VelocityHeadingFieldNumber = 13;
    private double velocityHeading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityHeading {
      get { if ((_hasBits0 & 4096) != 0) { return velocityHeading_; } else { return 0D; } }
      set {
        _hasBits0 |= 4096;
        velocityHeading_ = value;
      }
    }
    /// <summary>Gets whether the "velocity_heading" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVelocityHeading {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "velocity_heading" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVelocityHeading() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "velocity_bank" field.</summary>
    public const int VelocityBankFieldNumber = 14;
    private double velocityBank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityBank {
      get { if ((_hasBits0 & 8192) != 0) { return velocityBank_; } else { return 0D; } }
      set {
        _hasBits0 |= 8192;
        velocityBank_ = value;
      }
    }
    /// <summary>Gets whether the "velocity_bank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVelocityBank {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "velocity_bank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVelocityBank() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAircraftData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAircraftData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PressureAltitude, other.PressureAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundSpeed, other.GroundSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityLatitude, other.VelocityLatitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityAltitude, other.VelocityAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityLongitude, other.VelocityLongitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityPitch, other.VelocityPitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityHeading, other.VelocityHeading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityBank, other.VelocityBank)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (HasAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      if (HasPressureAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PressureAltitude);
      if (HasGroundSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundSpeed);
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
      if (HasVelocityLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityLatitude);
      if (HasVelocityAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityAltitude);
      if (HasVelocityLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityLongitude);
      if (HasVelocityPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityPitch);
      if (HasVelocityHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityHeading);
      if (HasVelocityBank) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityBank);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLongitude) {
        output.WriteRawTag(9);
        output.WriteDouble(Longitude);
      }
      if (HasLatitude) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (HasAltitude) {
        output.WriteRawTag(25);
        output.WriteDouble(Altitude);
      }
      if (HasPressureAltitude) {
        output.WriteRawTag(33);
        output.WriteDouble(PressureAltitude);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(41);
        output.WriteDouble(GroundSpeed);
      }
      if (HasPitch) {
        output.WriteRawTag(49);
        output.WriteDouble(Pitch);
      }
      if (HasRoll) {
        output.WriteRawTag(57);
        output.WriteDouble(Roll);
      }
      if (HasYaw) {
        output.WriteRawTag(65);
        output.WriteDouble(Yaw);
      }
      if (HasVelocityLatitude) {
        output.WriteRawTag(73);
        output.WriteDouble(VelocityLatitude);
      }
      if (HasVelocityAltitude) {
        output.WriteRawTag(81);
        output.WriteDouble(VelocityAltitude);
      }
      if (HasVelocityLongitude) {
        output.WriteRawTag(89);
        output.WriteDouble(VelocityLongitude);
      }
      if (HasVelocityPitch) {
        output.WriteRawTag(97);
        output.WriteDouble(VelocityPitch);
      }
      if (HasVelocityHeading) {
        output.WriteRawTag(105);
        output.WriteDouble(VelocityHeading);
      }
      if (HasVelocityBank) {
        output.WriteRawTag(113);
        output.WriteDouble(VelocityBank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLongitude) {
        output.WriteRawTag(9);
        output.WriteDouble(Longitude);
      }
      if (HasLatitude) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (HasAltitude) {
        output.WriteRawTag(25);
        output.WriteDouble(Altitude);
      }
      if (HasPressureAltitude) {
        output.WriteRawTag(33);
        output.WriteDouble(PressureAltitude);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(41);
        output.WriteDouble(GroundSpeed);
      }
      if (HasPitch) {
        output.WriteRawTag(49);
        output.WriteDouble(Pitch);
      }
      if (HasRoll) {
        output.WriteRawTag(57);
        output.WriteDouble(Roll);
      }
      if (HasYaw) {
        output.WriteRawTag(65);
        output.WriteDouble(Yaw);
      }
      if (HasVelocityLatitude) {
        output.WriteRawTag(73);
        output.WriteDouble(VelocityLatitude);
      }
      if (HasVelocityAltitude) {
        output.WriteRawTag(81);
        output.WriteDouble(VelocityAltitude);
      }
      if (HasVelocityLongitude) {
        output.WriteRawTag(89);
        output.WriteDouble(VelocityLongitude);
      }
      if (HasVelocityPitch) {
        output.WriteRawTag(97);
        output.WriteDouble(VelocityPitch);
      }
      if (HasVelocityHeading) {
        output.WriteRawTag(105);
        output.WriteDouble(VelocityHeading);
      }
      if (HasVelocityBank) {
        output.WriteRawTag(113);
        output.WriteDouble(VelocityBank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLongitude) {
        size += 1 + 8;
      }
      if (HasLatitude) {
        size += 1 + 8;
      }
      if (HasAltitude) {
        size += 1 + 8;
      }
      if (HasPressureAltitude) {
        size += 1 + 8;
      }
      if (HasGroundSpeed) {
        size += 1 + 8;
      }
      if (HasPitch) {
        size += 1 + 8;
      }
      if (HasRoll) {
        size += 1 + 8;
      }
      if (HasYaw) {
        size += 1 + 8;
      }
      if (HasVelocityLatitude) {
        size += 1 + 8;
      }
      if (HasVelocityAltitude) {
        size += 1 + 8;
      }
      if (HasVelocityLongitude) {
        size += 1 + 8;
      }
      if (HasVelocityPitch) {
        size += 1 + 8;
      }
      if (HasVelocityHeading) {
        size += 1 + 8;
      }
      if (HasVelocityBank) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAircraftData other) {
      if (other == null) {
        return;
      }
      if (other.HasLongitude) {
        Longitude = other.Longitude;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      if (other.HasAltitude) {
        Altitude = other.Altitude;
      }
      if (other.HasPressureAltitude) {
        PressureAltitude = other.PressureAltitude;
      }
      if (other.HasGroundSpeed) {
        GroundSpeed = other.GroundSpeed;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasRoll) {
        Roll = other.Roll;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      if (other.HasVelocityLatitude) {
        VelocityLatitude = other.VelocityLatitude;
      }
      if (other.HasVelocityAltitude) {
        VelocityAltitude = other.VelocityAltitude;
      }
      if (other.HasVelocityLongitude) {
        VelocityLongitude = other.VelocityLongitude;
      }
      if (other.HasVelocityPitch) {
        VelocityPitch = other.VelocityPitch;
      }
      if (other.HasVelocityHeading) {
        VelocityHeading = other.VelocityHeading;
      }
      if (other.HasVelocityBank) {
        VelocityBank = other.VelocityBank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Longitude = input.ReadDouble();
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Altitude = input.ReadDouble();
            break;
          }
          case 33: {
            PressureAltitude = input.ReadDouble();
            break;
          }
          case 41: {
            GroundSpeed = input.ReadDouble();
            break;
          }
          case 49: {
            Pitch = input.ReadDouble();
            break;
          }
          case 57: {
            Roll = input.ReadDouble();
            break;
          }
          case 65: {
            Yaw = input.ReadDouble();
            break;
          }
          case 73: {
            VelocityLatitude = input.ReadDouble();
            break;
          }
          case 81: {
            VelocityAltitude = input.ReadDouble();
            break;
          }
          case 89: {
            VelocityLongitude = input.ReadDouble();
            break;
          }
          case 97: {
            VelocityPitch = input.ReadDouble();
            break;
          }
          case 105: {
            VelocityHeading = input.ReadDouble();
            break;
          }
          case 113: {
            VelocityBank = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Longitude = input.ReadDouble();
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Altitude = input.ReadDouble();
            break;
          }
          case 33: {
            PressureAltitude = input.ReadDouble();
            break;
          }
          case 41: {
            GroundSpeed = input.ReadDouble();
            break;
          }
          case 49: {
            Pitch = input.ReadDouble();
            break;
          }
          case 57: {
            Roll = input.ReadDouble();
            break;
          }
          case 65: {
            Yaw = input.ReadDouble();
            break;
          }
          case 73: {
            VelocityLatitude = input.ReadDouble();
            break;
          }
          case 81: {
            VelocityAltitude = input.ReadDouble();
            break;
          }
          case 89: {
            VelocityLongitude = input.ReadDouble();
            break;
          }
          case 97: {
            VelocityPitch = input.ReadDouble();
            break;
          }
          case 105: {
            VelocityHeading = input.ReadDouble();
            break;
          }
          case 113: {
            VelocityBank = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
