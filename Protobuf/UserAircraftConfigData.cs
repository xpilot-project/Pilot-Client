/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UserAircraftConfigData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from UserAircraftConfigData.proto</summary>
  public static partial class UserAircraftConfigDataReflection {

    #region Descriptor
    /// <summary>File descriptor for UserAircraftConfigData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserAircraftConfigDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxVc2VyQWlyY3JhZnRDb25maWdEYXRhLnByb3RvEgZ4cGlsb3QingUKFlVz",
            "ZXJBaXJjcmFmdENvbmZpZ0RhdGESHQoQYmVhY29uX2xpZ2h0c19vbhgBIAEo",
            "CEgAiAEBEh4KEWxhbmRpbmdfbGlnaHRzX29uGAIgASgISAGIAQESGgoNbmF2",
            "X2xpZ2h0c19vbhgDIAEoCEgCiAEBEh0KEHN0cm9iZV9saWdodHNfb24YBCAB",
            "KAhIA4gBARIbCg50YXhpX2xpZ2h0c19vbhgFIAEoCEgEiAEBEhIKBWZsYXBz",
            "GAYgASgBSAWIAQESFgoJZ2Vhcl9kb3duGAcgASgISAaIAQESGQoMc3BlZWRf",
            "YnJha2VzGAggASgBSAeIAQESGQoMZW5naW5lX2NvdW50GAkgASgFSAiIAQES",
            "HAoPZW5naW5lMV9ydW5uaW5nGAogASgISAmIAQESHAoPZW5naW5lMl9ydW5u",
            "aW5nGAsgASgISAqIAQESHAoPZW5naW5lM19ydW5uaW5nGAwgASgISAuIAQES",
            "HAoPZW5naW5lNF9ydW5uaW5nGA0gASgISAyIAQESFgoJb25fZ3JvdW5kGA4g",
            "ASgISA2IAQFCEwoRX2JlYWNvbl9saWdodHNfb25CFAoSX2xhbmRpbmdfbGln",
            "aHRzX29uQhAKDl9uYXZfbGlnaHRzX29uQhMKEV9zdHJvYmVfbGlnaHRzX29u",
            "QhEKD190YXhpX2xpZ2h0c19vbkIICgZfZmxhcHNCDAoKX2dlYXJfZG93bkIP",
            "Cg1fc3BlZWRfYnJha2VzQg8KDV9lbmdpbmVfY291bnRCEgoQX2VuZ2luZTFf",
            "cnVubmluZ0ISChBfZW5naW5lMl9ydW5uaW5nQhIKEF9lbmdpbmUzX3J1bm5p",
            "bmdCEgoQX2VuZ2luZTRfcnVubmluZ0IMCgpfb25fZ3JvdW5kQhmqAhZWYXRz",
            "aW0uWHBpbG90LlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData), global::Vatsim.Xpilot.Protobuf.UserAircraftConfigData.Parser, new[]{ "BeaconLightsOn", "LandingLightsOn", "NavLightsOn", "StrobeLightsOn", "TaxiLightsOn", "Flaps", "GearDown", "SpeedBrakes", "EngineCount", "Engine1Running", "Engine2Running", "Engine3Running", "Engine4Running", "OnGround" }, new[]{ "BeaconLightsOn", "LandingLightsOn", "NavLightsOn", "StrobeLightsOn", "TaxiLightsOn", "Flaps", "GearDown", "SpeedBrakes", "EngineCount", "Engine1Running", "Engine2Running", "Engine3Running", "Engine4Running", "OnGround" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserAircraftConfigData : pb::IMessage<UserAircraftConfigData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserAircraftConfigData> _parser = new pb::MessageParser<UserAircraftConfigData>(() => new UserAircraftConfigData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAircraftConfigData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.UserAircraftConfigDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAircraftConfigData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAircraftConfigData(UserAircraftConfigData other) : this() {
      _hasBits0 = other._hasBits0;
      beaconLightsOn_ = other.beaconLightsOn_;
      landingLightsOn_ = other.landingLightsOn_;
      navLightsOn_ = other.navLightsOn_;
      strobeLightsOn_ = other.strobeLightsOn_;
      taxiLightsOn_ = other.taxiLightsOn_;
      flaps_ = other.flaps_;
      gearDown_ = other.gearDown_;
      speedBrakes_ = other.speedBrakes_;
      engineCount_ = other.engineCount_;
      engine1Running_ = other.engine1Running_;
      engine2Running_ = other.engine2Running_;
      engine3Running_ = other.engine3Running_;
      engine4Running_ = other.engine4Running_;
      onGround_ = other.onGround_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAircraftConfigData Clone() {
      return new UserAircraftConfigData(this);
    }

    /// <summary>Field number for the "beacon_lights_on" field.</summary>
    public const int BeaconLightsOnFieldNumber = 1;
    private bool beaconLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeaconLightsOn {
      get { if ((_hasBits0 & 1) != 0) { return beaconLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        beaconLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "beacon_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBeaconLightsOn {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "beacon_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBeaconLightsOn() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "landing_lights_on" field.</summary>
    public const int LandingLightsOnFieldNumber = 2;
    private bool landingLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LandingLightsOn {
      get { if ((_hasBits0 & 2) != 0) { return landingLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        landingLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "landing_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLandingLightsOn {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "landing_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLandingLightsOn() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "nav_lights_on" field.</summary>
    public const int NavLightsOnFieldNumber = 3;
    private bool navLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NavLightsOn {
      get { if ((_hasBits0 & 4) != 0) { return navLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        navLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "nav_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNavLightsOn {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "nav_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNavLightsOn() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "strobe_lights_on" field.</summary>
    public const int StrobeLightsOnFieldNumber = 4;
    private bool strobeLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrobeLightsOn {
      get { if ((_hasBits0 & 8) != 0) { return strobeLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        strobeLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "strobe_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrobeLightsOn {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "strobe_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrobeLightsOn() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "taxi_lights_on" field.</summary>
    public const int TaxiLightsOnFieldNumber = 5;
    private bool taxiLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TaxiLightsOn {
      get { if ((_hasBits0 & 16) != 0) { return taxiLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        taxiLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "taxi_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaxiLightsOn {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "taxi_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaxiLightsOn() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "flaps" field.</summary>
    public const int FlapsFieldNumber = 6;
    private double flaps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Flaps {
      get { if ((_hasBits0 & 32) != 0) { return flaps_; } else { return 0D; } }
      set {
        _hasBits0 |= 32;
        flaps_ = value;
      }
    }
    /// <summary>Gets whether the "flaps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlaps {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "flaps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlaps() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "gear_down" field.</summary>
    public const int GearDownFieldNumber = 7;
    private bool gearDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GearDown {
      get { if ((_hasBits0 & 64) != 0) { return gearDown_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        gearDown_ = value;
      }
    }
    /// <summary>Gets whether the "gear_down" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGearDown {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "gear_down" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGearDown() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "speed_brakes" field.</summary>
    public const int SpeedBrakesFieldNumber = 8;
    private double speedBrakes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedBrakes {
      get { if ((_hasBits0 & 128) != 0) { return speedBrakes_; } else { return 0D; } }
      set {
        _hasBits0 |= 128;
        speedBrakes_ = value;
      }
    }
    /// <summary>Gets whether the "speed_brakes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeedBrakes {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "speed_brakes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeedBrakes() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "engine_count" field.</summary>
    public const int EngineCountFieldNumber = 9;
    private int engineCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EngineCount {
      get { if ((_hasBits0 & 256) != 0) { return engineCount_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        engineCount_ = value;
      }
    }
    /// <summary>Gets whether the "engine_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngineCount {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "engine_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngineCount() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "engine1_running" field.</summary>
    public const int Engine1RunningFieldNumber = 10;
    private bool engine1Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine1Running {
      get { if ((_hasBits0 & 512) != 0) { return engine1Running_; } else { return false; } }
      set {
        _hasBits0 |= 512;
        engine1Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine1_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine1Running {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "engine1_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine1Running() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "engine2_running" field.</summary>
    public const int Engine2RunningFieldNumber = 11;
    private bool engine2Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine2Running {
      get { if ((_hasBits0 & 1024) != 0) { return engine2Running_; } else { return false; } }
      set {
        _hasBits0 |= 1024;
        engine2Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine2_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine2Running {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "engine2_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine2Running() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "engine3_running" field.</summary>
    public const int Engine3RunningFieldNumber = 12;
    private bool engine3Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine3Running {
      get { if ((_hasBits0 & 2048) != 0) { return engine3Running_; } else { return false; } }
      set {
        _hasBits0 |= 2048;
        engine3Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine3_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine3Running {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "engine3_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine3Running() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "engine4_running" field.</summary>
    public const int Engine4RunningFieldNumber = 13;
    private bool engine4Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine4Running {
      get { if ((_hasBits0 & 4096) != 0) { return engine4Running_; } else { return false; } }
      set {
        _hasBits0 |= 4096;
        engine4Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine4_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine4Running {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "engine4_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine4Running() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "on_ground" field.</summary>
    public const int OnGroundFieldNumber = 14;
    private bool onGround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnGround {
      get { if ((_hasBits0 & 8192) != 0) { return onGround_; } else { return false; } }
      set {
        _hasBits0 |= 8192;
        onGround_ = value;
      }
    }
    /// <summary>Gets whether the "on_ground" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnGround {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "on_ground" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnGround() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAircraftConfigData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAircraftConfigData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeaconLightsOn != other.BeaconLightsOn) return false;
      if (LandingLightsOn != other.LandingLightsOn) return false;
      if (NavLightsOn != other.NavLightsOn) return false;
      if (StrobeLightsOn != other.StrobeLightsOn) return false;
      if (TaxiLightsOn != other.TaxiLightsOn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Flaps, other.Flaps)) return false;
      if (GearDown != other.GearDown) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedBrakes, other.SpeedBrakes)) return false;
      if (EngineCount != other.EngineCount) return false;
      if (Engine1Running != other.Engine1Running) return false;
      if (Engine2Running != other.Engine2Running) return false;
      if (Engine3Running != other.Engine3Running) return false;
      if (Engine4Running != other.Engine4Running) return false;
      if (OnGround != other.OnGround) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBeaconLightsOn) hash ^= BeaconLightsOn.GetHashCode();
      if (HasLandingLightsOn) hash ^= LandingLightsOn.GetHashCode();
      if (HasNavLightsOn) hash ^= NavLightsOn.GetHashCode();
      if (HasStrobeLightsOn) hash ^= StrobeLightsOn.GetHashCode();
      if (HasTaxiLightsOn) hash ^= TaxiLightsOn.GetHashCode();
      if (HasFlaps) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Flaps);
      if (HasGearDown) hash ^= GearDown.GetHashCode();
      if (HasSpeedBrakes) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedBrakes);
      if (HasEngineCount) hash ^= EngineCount.GetHashCode();
      if (HasEngine1Running) hash ^= Engine1Running.GetHashCode();
      if (HasEngine2Running) hash ^= Engine2Running.GetHashCode();
      if (HasEngine3Running) hash ^= Engine3Running.GetHashCode();
      if (HasEngine4Running) hash ^= Engine4Running.GetHashCode();
      if (HasOnGround) hash ^= OnGround.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBeaconLightsOn) {
        output.WriteRawTag(8);
        output.WriteBool(BeaconLightsOn);
      }
      if (HasLandingLightsOn) {
        output.WriteRawTag(16);
        output.WriteBool(LandingLightsOn);
      }
      if (HasNavLightsOn) {
        output.WriteRawTag(24);
        output.WriteBool(NavLightsOn);
      }
      if (HasStrobeLightsOn) {
        output.WriteRawTag(32);
        output.WriteBool(StrobeLightsOn);
      }
      if (HasTaxiLightsOn) {
        output.WriteRawTag(40);
        output.WriteBool(TaxiLightsOn);
      }
      if (HasFlaps) {
        output.WriteRawTag(49);
        output.WriteDouble(Flaps);
      }
      if (HasGearDown) {
        output.WriteRawTag(56);
        output.WriteBool(GearDown);
      }
      if (HasSpeedBrakes) {
        output.WriteRawTag(65);
        output.WriteDouble(SpeedBrakes);
      }
      if (HasEngineCount) {
        output.WriteRawTag(72);
        output.WriteInt32(EngineCount);
      }
      if (HasEngine1Running) {
        output.WriteRawTag(80);
        output.WriteBool(Engine1Running);
      }
      if (HasEngine2Running) {
        output.WriteRawTag(88);
        output.WriteBool(Engine2Running);
      }
      if (HasEngine3Running) {
        output.WriteRawTag(96);
        output.WriteBool(Engine3Running);
      }
      if (HasEngine4Running) {
        output.WriteRawTag(104);
        output.WriteBool(Engine4Running);
      }
      if (HasOnGround) {
        output.WriteRawTag(112);
        output.WriteBool(OnGround);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBeaconLightsOn) {
        output.WriteRawTag(8);
        output.WriteBool(BeaconLightsOn);
      }
      if (HasLandingLightsOn) {
        output.WriteRawTag(16);
        output.WriteBool(LandingLightsOn);
      }
      if (HasNavLightsOn) {
        output.WriteRawTag(24);
        output.WriteBool(NavLightsOn);
      }
      if (HasStrobeLightsOn) {
        output.WriteRawTag(32);
        output.WriteBool(StrobeLightsOn);
      }
      if (HasTaxiLightsOn) {
        output.WriteRawTag(40);
        output.WriteBool(TaxiLightsOn);
      }
      if (HasFlaps) {
        output.WriteRawTag(49);
        output.WriteDouble(Flaps);
      }
      if (HasGearDown) {
        output.WriteRawTag(56);
        output.WriteBool(GearDown);
      }
      if (HasSpeedBrakes) {
        output.WriteRawTag(65);
        output.WriteDouble(SpeedBrakes);
      }
      if (HasEngineCount) {
        output.WriteRawTag(72);
        output.WriteInt32(EngineCount);
      }
      if (HasEngine1Running) {
        output.WriteRawTag(80);
        output.WriteBool(Engine1Running);
      }
      if (HasEngine2Running) {
        output.WriteRawTag(88);
        output.WriteBool(Engine2Running);
      }
      if (HasEngine3Running) {
        output.WriteRawTag(96);
        output.WriteBool(Engine3Running);
      }
      if (HasEngine4Running) {
        output.WriteRawTag(104);
        output.WriteBool(Engine4Running);
      }
      if (HasOnGround) {
        output.WriteRawTag(112);
        output.WriteBool(OnGround);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBeaconLightsOn) {
        size += 1 + 1;
      }
      if (HasLandingLightsOn) {
        size += 1 + 1;
      }
      if (HasNavLightsOn) {
        size += 1 + 1;
      }
      if (HasStrobeLightsOn) {
        size += 1 + 1;
      }
      if (HasTaxiLightsOn) {
        size += 1 + 1;
      }
      if (HasFlaps) {
        size += 1 + 8;
      }
      if (HasGearDown) {
        size += 1 + 1;
      }
      if (HasSpeedBrakes) {
        size += 1 + 8;
      }
      if (HasEngineCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EngineCount);
      }
      if (HasEngine1Running) {
        size += 1 + 1;
      }
      if (HasEngine2Running) {
        size += 1 + 1;
      }
      if (HasEngine3Running) {
        size += 1 + 1;
      }
      if (HasEngine4Running) {
        size += 1 + 1;
      }
      if (HasOnGround) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAircraftConfigData other) {
      if (other == null) {
        return;
      }
      if (other.HasBeaconLightsOn) {
        BeaconLightsOn = other.BeaconLightsOn;
      }
      if (other.HasLandingLightsOn) {
        LandingLightsOn = other.LandingLightsOn;
      }
      if (other.HasNavLightsOn) {
        NavLightsOn = other.NavLightsOn;
      }
      if (other.HasStrobeLightsOn) {
        StrobeLightsOn = other.StrobeLightsOn;
      }
      if (other.HasTaxiLightsOn) {
        TaxiLightsOn = other.TaxiLightsOn;
      }
      if (other.HasFlaps) {
        Flaps = other.Flaps;
      }
      if (other.HasGearDown) {
        GearDown = other.GearDown;
      }
      if (other.HasSpeedBrakes) {
        SpeedBrakes = other.SpeedBrakes;
      }
      if (other.HasEngineCount) {
        EngineCount = other.EngineCount;
      }
      if (other.HasEngine1Running) {
        Engine1Running = other.Engine1Running;
      }
      if (other.HasEngine2Running) {
        Engine2Running = other.Engine2Running;
      }
      if (other.HasEngine3Running) {
        Engine3Running = other.Engine3Running;
      }
      if (other.HasEngine4Running) {
        Engine4Running = other.Engine4Running;
      }
      if (other.HasOnGround) {
        OnGround = other.OnGround;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BeaconLightsOn = input.ReadBool();
            break;
          }
          case 16: {
            LandingLightsOn = input.ReadBool();
            break;
          }
          case 24: {
            NavLightsOn = input.ReadBool();
            break;
          }
          case 32: {
            StrobeLightsOn = input.ReadBool();
            break;
          }
          case 40: {
            TaxiLightsOn = input.ReadBool();
            break;
          }
          case 49: {
            Flaps = input.ReadDouble();
            break;
          }
          case 56: {
            GearDown = input.ReadBool();
            break;
          }
          case 65: {
            SpeedBrakes = input.ReadDouble();
            break;
          }
          case 72: {
            EngineCount = input.ReadInt32();
            break;
          }
          case 80: {
            Engine1Running = input.ReadBool();
            break;
          }
          case 88: {
            Engine2Running = input.ReadBool();
            break;
          }
          case 96: {
            Engine3Running = input.ReadBool();
            break;
          }
          case 104: {
            Engine4Running = input.ReadBool();
            break;
          }
          case 112: {
            OnGround = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BeaconLightsOn = input.ReadBool();
            break;
          }
          case 16: {
            LandingLightsOn = input.ReadBool();
            break;
          }
          case 24: {
            NavLightsOn = input.ReadBool();
            break;
          }
          case 32: {
            StrobeLightsOn = input.ReadBool();
            break;
          }
          case 40: {
            TaxiLightsOn = input.ReadBool();
            break;
          }
          case 49: {
            Flaps = input.ReadDouble();
            break;
          }
          case 56: {
            GearDown = input.ReadBool();
            break;
          }
          case 65: {
            SpeedBrakes = input.ReadDouble();
            break;
          }
          case 72: {
            EngineCount = input.ReadInt32();
            break;
          }
          case 80: {
            Engine1Running = input.ReadBool();
            break;
          }
          case 88: {
            Engine2Running = input.ReadBool();
            break;
          }
          case 96: {
            Engine3Running = input.ReadBool();
            break;
          }
          case 104: {
            Engine4Running = input.ReadBool();
            break;
          }
          case 112: {
            OnGround = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
