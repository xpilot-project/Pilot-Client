/*
 * xPilot: X-Plane pilot client for VATSIM
 * Copyright (C) 2019-2021 Justin Shannon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
*/

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RadioStack.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Vatsim.Xpilot.Protobuf {

  /// <summary>Holder for reflection information generated from RadioStack.proto</summary>
  public static partial class RadioStackReflection {

    #region Descriptor
    /// <summary>File descriptor for RadioStack.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RadioStackReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBSYWRpb1N0YWNrLnByb3RvEgZ4cGlsb3QirAUKClJhZGlvU3RhY2sSIAoT",
            "YXVkaW9fY29tX3NlbGVjdGlvbhgBIAEoBUgAiAEBEhcKCmNvbTFfcG93ZXIY",
            "AiABKAhIAYgBARIWCgljb20xX2ZyZXEYAyABKAVIAogBARIhChRjb20xX2F1",
            "ZGlvX3NlbGVjdGlvbhgEIAEoCEgDiAEBEhgKC2NvbTFfdm9sdW1lGAUgASgC",
            "SASIAQESFwoKY29tMl9wb3dlchgGIAEoCEgFiAEBEhYKCWNvbTJfZnJlcRgH",
            "IAEoBUgGiAEBEiEKFGNvbTJfYXVkaW9fc2VsZWN0aW9uGAggASgISAeIAQES",
            "GAoLY29tMl92b2x1bWUYCSABKAJICIgBARIeChFhdmlvbmljc19wb3dlcl9v",
            "bhgKIAEoCEgJiAEBEh0KEHRyYW5zcG9uZGVyX2NvZGUYCyABKAVICogBARId",
            "ChB0cmFuc3BvbmRlcl9tb2RlGAwgASgFSAuIAQESHgoRdHJhbnNwb25kZXJf",
            "aWRlbnQYDSABKAhIDIgBARIYCgtwdHRfcHJlc3NlZBgOIAEoCEgNiAEBQhYK",
            "FF9hdWRpb19jb21fc2VsZWN0aW9uQg0KC19jb20xX3Bvd2VyQgwKCl9jb20x",
            "X2ZyZXFCFwoVX2NvbTFfYXVkaW9fc2VsZWN0aW9uQg4KDF9jb20xX3ZvbHVt",
            "ZUINCgtfY29tMl9wb3dlckIMCgpfY29tMl9mcmVxQhcKFV9jb20yX2F1ZGlv",
            "X3NlbGVjdGlvbkIOCgxfY29tMl92b2x1bWVCFAoSX2F2aW9uaWNzX3Bvd2Vy",
            "X29uQhMKEV90cmFuc3BvbmRlcl9jb2RlQhMKEV90cmFuc3BvbmRlcl9tb2Rl",
            "QhQKEl90cmFuc3BvbmRlcl9pZGVudEIOCgxfcHR0X3ByZXNzZWRCGaoCFlZh",
            "dHNpbS5YcGlsb3QuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Vatsim.Xpilot.Protobuf.RadioStack), global::Vatsim.Xpilot.Protobuf.RadioStack.Parser, new[]{ "AudioComSelection", "Com1Power", "Com1Freq", "Com1AudioSelection", "Com1Volume", "Com2Power", "Com2Freq", "Com2AudioSelection", "Com2Volume", "AvionicsPowerOn", "TransponderCode", "TransponderMode", "TransponderIdent", "PttPressed" }, new[]{ "AudioComSelection", "Com1Power", "Com1Freq", "Com1AudioSelection", "Com1Volume", "Com2Power", "Com2Freq", "Com2AudioSelection", "Com2Volume", "AvionicsPowerOn", "TransponderCode", "TransponderMode", "TransponderIdent", "PttPressed" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RadioStack : pb::IMessage<RadioStack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RadioStack> _parser = new pb::MessageParser<RadioStack>(() => new RadioStack());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RadioStack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Vatsim.Xpilot.Protobuf.RadioStackReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadioStack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadioStack(RadioStack other) : this() {
      _hasBits0 = other._hasBits0;
      audioComSelection_ = other.audioComSelection_;
      com1Power_ = other.com1Power_;
      com1Freq_ = other.com1Freq_;
      com1AudioSelection_ = other.com1AudioSelection_;
      com1Volume_ = other.com1Volume_;
      com2Power_ = other.com2Power_;
      com2Freq_ = other.com2Freq_;
      com2AudioSelection_ = other.com2AudioSelection_;
      com2Volume_ = other.com2Volume_;
      avionicsPowerOn_ = other.avionicsPowerOn_;
      transponderCode_ = other.transponderCode_;
      transponderMode_ = other.transponderMode_;
      transponderIdent_ = other.transponderIdent_;
      pttPressed_ = other.pttPressed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RadioStack Clone() {
      return new RadioStack(this);
    }

    /// <summary>Field number for the "audio_com_selection" field.</summary>
    public const int AudioComSelectionFieldNumber = 1;
    private int audioComSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioComSelection {
      get { if ((_hasBits0 & 1) != 0) { return audioComSelection_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        audioComSelection_ = value;
      }
    }
    /// <summary>Gets whether the "audio_com_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAudioComSelection {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "audio_com_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAudioComSelection() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "com1_power" field.</summary>
    public const int Com1PowerFieldNumber = 2;
    private bool com1Power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com1Power {
      get { if ((_hasBits0 & 2) != 0) { return com1Power_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        com1Power_ = value;
      }
    }
    /// <summary>Gets whether the "com1_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1Power {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "com1_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1Power() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "com1_freq" field.</summary>
    public const int Com1FreqFieldNumber = 3;
    private int com1Freq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Com1Freq {
      get { if ((_hasBits0 & 4) != 0) { return com1Freq_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        com1Freq_ = value;
      }
    }
    /// <summary>Gets whether the "com1_freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1Freq {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "com1_freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1Freq() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "com1_audio_selection" field.</summary>
    public const int Com1AudioSelectionFieldNumber = 4;
    private bool com1AudioSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com1AudioSelection {
      get { if ((_hasBits0 & 8) != 0) { return com1AudioSelection_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        com1AudioSelection_ = value;
      }
    }
    /// <summary>Gets whether the "com1_audio_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1AudioSelection {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "com1_audio_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1AudioSelection() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "com1_volume" field.</summary>
    public const int Com1VolumeFieldNumber = 5;
    private float com1Volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Com1Volume {
      get { if ((_hasBits0 & 16) != 0) { return com1Volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 16;
        com1Volume_ = value;
      }
    }
    /// <summary>Gets whether the "com1_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1Volume {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "com1_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1Volume() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "com2_power" field.</summary>
    public const int Com2PowerFieldNumber = 6;
    private bool com2Power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com2Power {
      get { if ((_hasBits0 & 32) != 0) { return com2Power_; } else { return false; } }
      set {
        _hasBits0 |= 32;
        com2Power_ = value;
      }
    }
    /// <summary>Gets whether the "com2_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2Power {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "com2_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2Power() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "com2_freq" field.</summary>
    public const int Com2FreqFieldNumber = 7;
    private int com2Freq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Com2Freq {
      get { if ((_hasBits0 & 64) != 0) { return com2Freq_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        com2Freq_ = value;
      }
    }
    /// <summary>Gets whether the "com2_freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2Freq {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "com2_freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2Freq() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "com2_audio_selection" field.</summary>
    public const int Com2AudioSelectionFieldNumber = 8;
    private bool com2AudioSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com2AudioSelection {
      get { if ((_hasBits0 & 128) != 0) { return com2AudioSelection_; } else { return false; } }
      set {
        _hasBits0 |= 128;
        com2AudioSelection_ = value;
      }
    }
    /// <summary>Gets whether the "com2_audio_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2AudioSelection {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "com2_audio_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2AudioSelection() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "com2_volume" field.</summary>
    public const int Com2VolumeFieldNumber = 9;
    private float com2Volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Com2Volume {
      get { if ((_hasBits0 & 256) != 0) { return com2Volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 256;
        com2Volume_ = value;
      }
    }
    /// <summary>Gets whether the "com2_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2Volume {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "com2_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2Volume() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "avionics_power_on" field.</summary>
    public const int AvionicsPowerOnFieldNumber = 10;
    private bool avionicsPowerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvionicsPowerOn {
      get { if ((_hasBits0 & 512) != 0) { return avionicsPowerOn_; } else { return false; } }
      set {
        _hasBits0 |= 512;
        avionicsPowerOn_ = value;
      }
    }
    /// <summary>Gets whether the "avionics_power_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvionicsPowerOn {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "avionics_power_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvionicsPowerOn() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "transponder_code" field.</summary>
    public const int TransponderCodeFieldNumber = 11;
    private int transponderCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransponderCode {
      get { if ((_hasBits0 & 1024) != 0) { return transponderCode_; } else { return 0; } }
      set {
        _hasBits0 |= 1024;
        transponderCode_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderCode {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "transponder_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderCode() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "transponder_mode" field.</summary>
    public const int TransponderModeFieldNumber = 12;
    private int transponderMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransponderMode {
      get { if ((_hasBits0 & 2048) != 0) { return transponderMode_; } else { return 0; } }
      set {
        _hasBits0 |= 2048;
        transponderMode_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderMode {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "transponder_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderMode() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "transponder_ident" field.</summary>
    public const int TransponderIdentFieldNumber = 13;
    private bool transponderIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransponderIdent {
      get { if ((_hasBits0 & 4096) != 0) { return transponderIdent_; } else { return false; } }
      set {
        _hasBits0 |= 4096;
        transponderIdent_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_ident" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderIdent {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "transponder_ident" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderIdent() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ptt_pressed" field.</summary>
    public const int PttPressedFieldNumber = 14;
    private bool pttPressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PttPressed {
      get { if ((_hasBits0 & 8192) != 0) { return pttPressed_; } else { return false; } }
      set {
        _hasBits0 |= 8192;
        pttPressed_ = value;
      }
    }
    /// <summary>Gets whether the "ptt_pressed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPttPressed {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "ptt_pressed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPttPressed() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RadioStack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RadioStack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioComSelection != other.AudioComSelection) return false;
      if (Com1Power != other.Com1Power) return false;
      if (Com1Freq != other.Com1Freq) return false;
      if (Com1AudioSelection != other.Com1AudioSelection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Com1Volume, other.Com1Volume)) return false;
      if (Com2Power != other.Com2Power) return false;
      if (Com2Freq != other.Com2Freq) return false;
      if (Com2AudioSelection != other.Com2AudioSelection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Com2Volume, other.Com2Volume)) return false;
      if (AvionicsPowerOn != other.AvionicsPowerOn) return false;
      if (TransponderCode != other.TransponderCode) return false;
      if (TransponderMode != other.TransponderMode) return false;
      if (TransponderIdent != other.TransponderIdent) return false;
      if (PttPressed != other.PttPressed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAudioComSelection) hash ^= AudioComSelection.GetHashCode();
      if (HasCom1Power) hash ^= Com1Power.GetHashCode();
      if (HasCom1Freq) hash ^= Com1Freq.GetHashCode();
      if (HasCom1AudioSelection) hash ^= Com1AudioSelection.GetHashCode();
      if (HasCom1Volume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Com1Volume);
      if (HasCom2Power) hash ^= Com2Power.GetHashCode();
      if (HasCom2Freq) hash ^= Com2Freq.GetHashCode();
      if (HasCom2AudioSelection) hash ^= Com2AudioSelection.GetHashCode();
      if (HasCom2Volume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Com2Volume);
      if (HasAvionicsPowerOn) hash ^= AvionicsPowerOn.GetHashCode();
      if (HasTransponderCode) hash ^= TransponderCode.GetHashCode();
      if (HasTransponderMode) hash ^= TransponderMode.GetHashCode();
      if (HasTransponderIdent) hash ^= TransponderIdent.GetHashCode();
      if (HasPttPressed) hash ^= PttPressed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAudioComSelection) {
        output.WriteRawTag(8);
        output.WriteInt32(AudioComSelection);
      }
      if (HasCom1Power) {
        output.WriteRawTag(16);
        output.WriteBool(Com1Power);
      }
      if (HasCom1Freq) {
        output.WriteRawTag(24);
        output.WriteInt32(Com1Freq);
      }
      if (HasCom1AudioSelection) {
        output.WriteRawTag(32);
        output.WriteBool(Com1AudioSelection);
      }
      if (HasCom1Volume) {
        output.WriteRawTag(45);
        output.WriteFloat(Com1Volume);
      }
      if (HasCom2Power) {
        output.WriteRawTag(48);
        output.WriteBool(Com2Power);
      }
      if (HasCom2Freq) {
        output.WriteRawTag(56);
        output.WriteInt32(Com2Freq);
      }
      if (HasCom2AudioSelection) {
        output.WriteRawTag(64);
        output.WriteBool(Com2AudioSelection);
      }
      if (HasCom2Volume) {
        output.WriteRawTag(77);
        output.WriteFloat(Com2Volume);
      }
      if (HasAvionicsPowerOn) {
        output.WriteRawTag(80);
        output.WriteBool(AvionicsPowerOn);
      }
      if (HasTransponderCode) {
        output.WriteRawTag(88);
        output.WriteInt32(TransponderCode);
      }
      if (HasTransponderMode) {
        output.WriteRawTag(96);
        output.WriteInt32(TransponderMode);
      }
      if (HasTransponderIdent) {
        output.WriteRawTag(104);
        output.WriteBool(TransponderIdent);
      }
      if (HasPttPressed) {
        output.WriteRawTag(112);
        output.WriteBool(PttPressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAudioComSelection) {
        output.WriteRawTag(8);
        output.WriteInt32(AudioComSelection);
      }
      if (HasCom1Power) {
        output.WriteRawTag(16);
        output.WriteBool(Com1Power);
      }
      if (HasCom1Freq) {
        output.WriteRawTag(24);
        output.WriteInt32(Com1Freq);
      }
      if (HasCom1AudioSelection) {
        output.WriteRawTag(32);
        output.WriteBool(Com1AudioSelection);
      }
      if (HasCom1Volume) {
        output.WriteRawTag(45);
        output.WriteFloat(Com1Volume);
      }
      if (HasCom2Power) {
        output.WriteRawTag(48);
        output.WriteBool(Com2Power);
      }
      if (HasCom2Freq) {
        output.WriteRawTag(56);
        output.WriteInt32(Com2Freq);
      }
      if (HasCom2AudioSelection) {
        output.WriteRawTag(64);
        output.WriteBool(Com2AudioSelection);
      }
      if (HasCom2Volume) {
        output.WriteRawTag(77);
        output.WriteFloat(Com2Volume);
      }
      if (HasAvionicsPowerOn) {
        output.WriteRawTag(80);
        output.WriteBool(AvionicsPowerOn);
      }
      if (HasTransponderCode) {
        output.WriteRawTag(88);
        output.WriteInt32(TransponderCode);
      }
      if (HasTransponderMode) {
        output.WriteRawTag(96);
        output.WriteInt32(TransponderMode);
      }
      if (HasTransponderIdent) {
        output.WriteRawTag(104);
        output.WriteBool(TransponderIdent);
      }
      if (HasPttPressed) {
        output.WriteRawTag(112);
        output.WriteBool(PttPressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAudioComSelection) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioComSelection);
      }
      if (HasCom1Power) {
        size += 1 + 1;
      }
      if (HasCom1Freq) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com1Freq);
      }
      if (HasCom1AudioSelection) {
        size += 1 + 1;
      }
      if (HasCom1Volume) {
        size += 1 + 4;
      }
      if (HasCom2Power) {
        size += 1 + 1;
      }
      if (HasCom2Freq) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com2Freq);
      }
      if (HasCom2AudioSelection) {
        size += 1 + 1;
      }
      if (HasCom2Volume) {
        size += 1 + 4;
      }
      if (HasAvionicsPowerOn) {
        size += 1 + 1;
      }
      if (HasTransponderCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransponderCode);
      }
      if (HasTransponderMode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransponderMode);
      }
      if (HasTransponderIdent) {
        size += 1 + 1;
      }
      if (HasPttPressed) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RadioStack other) {
      if (other == null) {
        return;
      }
      if (other.HasAudioComSelection) {
        AudioComSelection = other.AudioComSelection;
      }
      if (other.HasCom1Power) {
        Com1Power = other.Com1Power;
      }
      if (other.HasCom1Freq) {
        Com1Freq = other.Com1Freq;
      }
      if (other.HasCom1AudioSelection) {
        Com1AudioSelection = other.Com1AudioSelection;
      }
      if (other.HasCom1Volume) {
        Com1Volume = other.Com1Volume;
      }
      if (other.HasCom2Power) {
        Com2Power = other.Com2Power;
      }
      if (other.HasCom2Freq) {
        Com2Freq = other.Com2Freq;
      }
      if (other.HasCom2AudioSelection) {
        Com2AudioSelection = other.Com2AudioSelection;
      }
      if (other.HasCom2Volume) {
        Com2Volume = other.Com2Volume;
      }
      if (other.HasAvionicsPowerOn) {
        AvionicsPowerOn = other.AvionicsPowerOn;
      }
      if (other.HasTransponderCode) {
        TransponderCode = other.TransponderCode;
      }
      if (other.HasTransponderMode) {
        TransponderMode = other.TransponderMode;
      }
      if (other.HasTransponderIdent) {
        TransponderIdent = other.TransponderIdent;
      }
      if (other.HasPttPressed) {
        PttPressed = other.PttPressed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AudioComSelection = input.ReadInt32();
            break;
          }
          case 16: {
            Com1Power = input.ReadBool();
            break;
          }
          case 24: {
            Com1Freq = input.ReadInt32();
            break;
          }
          case 32: {
            Com1AudioSelection = input.ReadBool();
            break;
          }
          case 45: {
            Com1Volume = input.ReadFloat();
            break;
          }
          case 48: {
            Com2Power = input.ReadBool();
            break;
          }
          case 56: {
            Com2Freq = input.ReadInt32();
            break;
          }
          case 64: {
            Com2AudioSelection = input.ReadBool();
            break;
          }
          case 77: {
            Com2Volume = input.ReadFloat();
            break;
          }
          case 80: {
            AvionicsPowerOn = input.ReadBool();
            break;
          }
          case 88: {
            TransponderCode = input.ReadInt32();
            break;
          }
          case 96: {
            TransponderMode = input.ReadInt32();
            break;
          }
          case 104: {
            TransponderIdent = input.ReadBool();
            break;
          }
          case 112: {
            PttPressed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AudioComSelection = input.ReadInt32();
            break;
          }
          case 16: {
            Com1Power = input.ReadBool();
            break;
          }
          case 24: {
            Com1Freq = input.ReadInt32();
            break;
          }
          case 32: {
            Com1AudioSelection = input.ReadBool();
            break;
          }
          case 45: {
            Com1Volume = input.ReadFloat();
            break;
          }
          case 48: {
            Com2Power = input.ReadBool();
            break;
          }
          case 56: {
            Com2Freq = input.ReadInt32();
            break;
          }
          case 64: {
            Com2AudioSelection = input.ReadBool();
            break;
          }
          case 77: {
            Com2Volume = input.ReadFloat();
            break;
          }
          case 80: {
            AvionicsPowerOn = input.ReadBool();
            break;
          }
          case 88: {
            TransponderCode = input.ReadInt32();
            break;
          }
          case 96: {
            TransponderMode = input.ReadInt32();
            break;
          }
          case 104: {
            TransponderIdent = input.ReadBool();
            break;
          }
          case 112: {
            PttPressed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
